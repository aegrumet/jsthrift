/* Jison generated parser */
var thriftweb = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Program":3,"HeaderList":4,"DefinitionList":5,"CaptureDocText":6,"DestroyDocText":7,"Header":8,"Include":9,"tok_namespace":10,"tok_identifier":11,"*":12,"tok_cpp_namespace":13,"tok_cpp_include":14,"tok_literal":15,"tok_php_namespace":16,"tok_py_module":17,"tok_perl_package":18,"tok_ruby_namespace":19,"tok_smalltalk_category":20,"tok_st_identifier":21,"tok_smalltalk_prefix":22,"tok_java_package":23,"tok_cocoa_prefix":24,"tok_xsd_namespace":25,"tok_csharp_namespace":26,"tok_delphi_namespace":27,"tok_include":28,"Definition":29,"Const":30,"TypeDefinition":31,"Service":32,"tok_const":33,"FieldType":34,"=":35,"ConstValue":36,"CommaOrSemicolonOptional":37,"tok_int_constant":38,"tok_dub_constant":39,"ConstList":40,"ConstMap":41,"[":42,"ConstListContents":43,"]":44,"{":45,"ConstMapContents":46,"}":47,":":48,"Typedef":49,"Enum":50,"Senum":51,"Struct":52,"Xception":53,"tok_typedef":54,"tok_enum":55,"EnumDefList":56,"EnumDef":57,"tok_senum":58,"SenumDefList":59,"SenumDef":60,"StructHead":61,"tok_struct":62,"tok_union":63,"XsdAll":64,"FieldList":65,"TypeAnnotations":66,"tok_xception":67,"tok_service":68,"Extends":69,"FunctionList":70,"tok_extends":71,"Function":72,"Oneway":73,"FunctionType":74,"(":75,")":76,"Throws":77,"tok_oneway":78,"tok_throws":79,"Field":80,"FieldIdentifier":81,"FieldRequiredness":82,"FieldValue":83,"XsdOptional":84,"XsdNillable":85,"XsdAttributes":86,"tok_required":87,"tok_optional":88,"tok_void":89,"BaseType":90,"ContainerType":91,"SimpleBaseType":92,"tok_string":93,"tok_binary":94,"tok_slist":95,"tok_bool":96,"tok_byte":97,"tok_i16":98,"tok_i32":99,"tok_i64":100,"tok_double":101,"SimpleContainerType":102,"MapType":103,"SetType":104,"ListType":105,"tok_map":106,"CppType":107,"<":108,",":109,">":110,"tok_set":111,"tok_list":112,"tok_cpp_type":113,"TypeAnnotationList":114,"TypeAnnotation":115,";":116,"tok_xsd_all":117,"tok_xsd_optional":118,"tok_xsd_nillable":119,"tok_xsd_attrs":120,"$accept":0,"$end":1},
terminals_: {2:"error",10:"tok_namespace",11:"tok_identifier",12:"*",13:"tok_cpp_namespace",14:"tok_cpp_include",15:"tok_literal",16:"tok_php_namespace",17:"tok_py_module",18:"tok_perl_package",19:"tok_ruby_namespace",20:"tok_smalltalk_category",21:"tok_st_identifier",22:"tok_smalltalk_prefix",23:"tok_java_package",24:"tok_cocoa_prefix",25:"tok_xsd_namespace",26:"tok_csharp_namespace",27:"tok_delphi_namespace",28:"tok_include",33:"tok_const",35:"=",38:"tok_int_constant",39:"tok_dub_constant",42:"[",44:"]",45:"{",47:"}",48:":",54:"tok_typedef",55:"tok_enum",58:"tok_senum",62:"tok_struct",63:"tok_union",67:"tok_xception",68:"tok_service",71:"tok_extends",75:"(",76:")",78:"tok_oneway",79:"tok_throws",87:"tok_required",88:"tok_optional",89:"tok_void",93:"tok_string",94:"tok_binary",95:"tok_slist",96:"tok_bool",97:"tok_byte",98:"tok_i16",99:"tok_i32",100:"tok_i64",101:"tok_double",106:"tok_map",108:"<",109:",",110:">",111:"tok_set",112:"tok_list",113:"tok_cpp_type",116:";",117:"tok_xsd_all",118:"tok_xsd_optional",119:"tok_xsd_nillable",120:"tok_xsd_attrs"},
productions_: [0,[3,2],[6,0],[7,0],[4,3],[4,1],[8,1],[8,3],[8,3],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[9,2],[5,3],[5,0],[29,1],[29,1],[29,1],[30,6],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[40,3],[43,3],[43,0],[41,3],[46,5],[46,0],[31,1],[31,1],[31,1],[31,1],[31,1],[49,3],[50,5],[56,2],[56,0],[57,5],[57,3],[51,5],[59,2],[59,0],[60,2],[61,1],[61,1],[52,7],[53,5],[32,6],[69,2],[69,0],[70,2],[70,0],[72,9],[73,1],[73,0],[77,4],[77,0],[65,2],[65,0],[80,11],[81,2],[81,0],[82,1],[82,1],[82,0],[83,2],[83,0],[74,1],[74,1],[34,1],[34,1],[34,1],[90,2],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[91,2],[102,1],[102,1],[102,1],[103,7],[104,5],[105,5],[107,2],[107,0],[66,3],[66,0],[114,2],[114,0],[115,4],[37,1],[37,1],[37,0],[64,1],[64,0],[84,1],[84,0],[85,1],[85,0],[86,4],[86,0]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:
      yy.util.debug_log("Program -> Headers DefinitionList");
    
break;
case 2:
      yy.util.debug_log("CaptureDocText");
      this.$ = g_doctext;
      g_doctext = null;
    
break;
case 3:
      yy.util.debug_log("DestroyDocText");
      g_doctext = null;
    
break;
case 4:
      yy.util.debug_log("HeaderList -> HeaderList Header");
    
break;
case 5:
      yy.util.debug_log("HeaderList -> ");
    
break;
case 6:
      yy.util.debug_log("Header -> Include");
    
break;
case 7:
      yy.util.debug_log("Header -> tok_namespace tok_identifier tok_identifier");
      yy.g_program.set_namespace($$[$0-1], $$[$0]);
    
break;
case 8:
      yy.util.debug_log("Header -> tok_namespace * tok_identifier");
      yy.g_program.set_namespace("*", $$[$0]);
    
break;
case 9:
      yy.util.debug_log("Header -> tok_cpp_namespace tok_identifier");
      yy.g_program.set_namespace("cpp", $$[$0]);
    
break;
case 10:
      yy.util.debug_log("Header -> tok_cpp_include tok_literal");
      yy.g_program.add_cpp_include($$[$0]);
    
break;
case 11:
      yy.util.debug_log("Header -> tok_php_namespace tok_identifier");
      yy.g_program.set_namespace("php", $$[$0]);
    
break;
case 12:
      yy.util.debug_log("Header -> tok_py_module tok_identifier");
      yy.g_program.set_namespace("py", $$[$0]);
    
break;
case 13:
      yy.util.debug_log("Header -> tok_perl_namespace tok_identifier");
      yy.g_program.set_namespace("perl", $$[$0]);
    
break;
case 14:
      yy.util.debug_log("Header -> tok_ruby_namespace tok_identifier");
      yy.g_program.set_namespace("rb", $$[$0]);
    
break;
case 15:
      yy.util.debug_log("Header -> tok_smalltalk_category tok_st_identifier");
      yy.g_program.set_namespace("smalltalk.category", $$[$0]);
    
break;
case 16:
      yy.util.debug_log("Header -> tok_smalltalk_prefix tok_identifier");
      yy.g_program.set_namespace("smalltalk.prefix", $$[$0]);
    
break;
case 17:
      yy.util.debug_log("Header -> tok_java_package tok_identifier");
      yy.g_program.set_namespace("java", $$[$0]);
    
break;
case 18:
      yy.util.debug_log("Header -> tok_cocoa_prefix tok_identifier");
      yy.g_program.set_namespace("cocoa", $$[$0]);
    
break;
case 19:
      yy.util.debug_log("Header -> tok_xsd_namespace tok_literal");
      yy.g_program.set_namespace("xsd", $$[$0]);
    
break;
case 20:
     yy.util.debug_log("Header -> tok_csharp_namespace tok_identifier");
     yy.g_program.set_namespace("csharp", $$[$0]);
    
break;
case 21:
     yy.util.debug_log("Header -> tok_delphi_namespace tok_identifier");
     yy.g_program.set_namespace("delphi", $$[$0]);
    
break;
case 22:
      yy.util.debug_log("Include -> tok_include tok_literal");
      yy.g_program.add_include(null,$$[$0]);
    
break;
case 23:
      yy.util.debug_log("DefinitionList -> DefinitionList Definition");
      if ($$[$0-1] != null && $$[$0] != null) {
        $$[$0].set_doc($$[$0-1]);
      }

    
break;
case 24:
      yy.util.debug_log("DefinitionList -> ");
    
break;
case 25:
      yy.util.debug_log("Definition -> Const");
      yy.g_program.add_const($$[$0]);
      this.$ = 1;
    
break;
case 26:
      yy.util.debug_log("Definition -> TypeDefinition");
      yy.g_scope.add_type($$[$0].get_name(), $$[$0]);
      this.$ = $$[$0];
    
break;
case 27:
      yy.util.debug_log("Definition -> Service");
      yy.g_scope.add_service($$[$0].get_name(), $$[$0]);
      yy.g_program.add_service($$[$0]);
      this.$ = $$[$0];
    
break;
case 28:
      yy.util.debug_log("Const -> tok_const FieldType tok_identifier = ConstValue");
      this.$ = new yy.t_const($$[$0-4], $$[$0-3], $$[$0-1]);
    
break;
case 29:
      yy.util.debug_log("ConstValue -> tok_int_constant");
    
break;
case 30:
      yy.util.debug_log("ConstValue -> tok_dub_constant");
    
break;
case 31:
      yy.util.debug_log("ConstValue -> tok_literal");
    
break;
case 32:
      yy.util.debug_log("ConstValue -> tok_identifier");
    
break;
case 33:
      yy.util.debug_log("ConstValue -> ConstList");
    
break;
case 34:
      yy.util.debug_log("ConstValue -> ConstMap");
    
break;
case 35:
      yy.util.debug_log("ConstList -> [ ConstListContents ]");
      this.$ = $$[$0-1];
    
break;
case 36:
      yy.util.debug_log("ConstListContents -> ConstListContents ConstValue CommaOrSemicolonOptional");
      this.$ = $$[$0-2];
      this.$.add_list($$[$0-1]);
    
break;
case 37:
      yy.util.debug_log("ConstListContents ->");
      this.$ = new yy.t_const_value();
      this.$.set_list();
    
break;
case 38:
      yy.util.debug_log("ConstMap -> { ConstMapContents }");
      this.$ = $$[$0-1];
    
break;
case 39:
      yy.util.debug_log("ConstMapContents -> ConstMapContents ConstValue CommaOrSemicolonOptional");
      this.$ = $$[$0-4];
      this.$.add_map($$[$0-3], $$[$0-1]);
    
break;
case 40:
      yy.util.debug_log("ConstMapContents ->");
      this.$ = new yy.t_const_value();
      this.$.set_map();
    
break;
case 41:
      yy.util.debug_log("TypeDefinition -> Typedef");
      yy.g_program.add_typedef($$[$0]);
    
break;
case 42:
      yy.util.debug_log("TypeDefinition -> Enum");
      yy.g_program.add_enum($$[$0]);
    
break;
case 43:
      yy.util.debug_log("TypeDefinition -> Senum");
      yy.g_program.add_typedef($$[$0]);
    
break;
case 44:
      yy.util.debug_log("TypeDefinition -> Struct");
      yy.g_program.add_struct($$[$0]);
    
break;
case 45:
      yy.util.debug_log("TypeDefinition -> Xception");
      yy.g_program.add_xception($$[$0]);
    
break;
case 46:
      yy.util.debug_log("TypeDef -> tok_typedef FieldType tok_identifier");
      this.$ = new yy.t_typedef(yy.g_program, $$[$0-1], $$[$0]);
    
break;
case 47:
      yy.util.debug_log("Enum -> tok_enum tok_identifier { EnumDefList }");
      this.$ = $$[$0-1];
      this.$.set_name($$[$0-3]);
    
break;
case 48:
      yy.util.debug_log("EnumDefList -> EnumDefList EnumDef");
      this.$ = $$[$0-1];
      this.$.append($$[$0]);
    
break;
case 49:
      yy.util.debug_log("EnumDefList -> ");
      this.$ = new yy.t_enum(yy.g_program);
    
break;
case 50:
      yy.util.debug_log("EnumDef -> tok_identifier = tok_int_constant");
      this.$ = new yy.t_enum_value($$[$0-3], $$[$0-1]);
      if ($$[$0-4] != null) {
        this.$.set_doc($$[$0-4]);
      }
    
break;
case 51:
      yy.util.debug_log("EnumDef -> tok_identifier");
      this.$ = new yy.t_enum_value($$[$0-1]);
      if ($$[$0-2] != null) {
        this.$.set_doc($$[$0-2]);
      }
    
break;
case 52:
      yy.util.debug_log("Senum -> tok_senum tok_identifier { SenumDefList }");
    
break;
case 53:
      yy.util.debug_log("SenumDefList -> SenumDefList SenumDef");
      this.$ = $$[$0-1];
      this.$.add_string_enum_val($$[$0]);
    
break;
case 54:
      yy.util.debug_log("SenumDefList -> ");
      this.$ = new yy.t_base_type("string", t_base_type.t_base_name.TYPE_STRING);
      this.$.set_string_enum(true);
    
break;
case 55:
      yy.util.debug_log("SenumDef -> tok_literal");
      this.$ = 1;
    
break;
case 56:
      yy.util.debug_log("StructHead -> tok_struct");
    
break;
case 57:
      yy.util.debug_log("StructHead -> tok_union");
    
break;
case 58:
      yy.util.debug_log("Struct -> tok_struct tok_identifier { FieldList }");
      this.$ = $$[$0-2];
      this.$.set_name($$[$0-5]);
    
break;
case 59:
      yy.util.debug_log("Xception -> tok_xception tok_identifier { FieldList }");
      $$[$0-1].set_name($$[$0-3]);
      $$[$0-1].set_xception(true);
      this.$ = $$[$0-1];
    
break;
case 60:
      yy.util.debug_log("Service -> tok_service tok_identifier { FunctionList }");
      this.$ = $$[$0-1];
      this.$.set_name($$[$0-4]);
      this.$.set_extends($$[$0-3]);
    
break;
case 61:
      yy.util.debug_log("Extends -> tok_extends tok_identifier");
    
break;
case 62:
    
break;
case 63:
      yy.util.debug_log("FunctionList -> FunctionList Function");
      this.$ = $$[$0-1];
      $$[$0-1].add_function($$[$0]);
    
break;
case 64:
      yy.util.debug_log("FunctionList -> ");
      this.$ = new yy.t_service(yy.g_program);
    
break;
case 65:
      yy.util.debug_log("Function -> FunctionType tok_identifier (FieldList) ");
      $$[$0-3].set_name($$[$0-5] + "_args");
      this.$ = new yy.t_function($$[$0-6], $$[$0-5], $$[$0-3], $$[$0-1], $$[$0-7]);
      if ($$[$0-8] != null) {
        this.$.set_doc($$[$0-8]);
      }
    
break;
case 66:
      yy.util.debug_log("Oneway -> tok_oneway");
      this.$ = true;
    
break;
case 67:
    
break;
case 68:
      yy.util.debug_log("Throws -> tok_throws ( FieldList )");
    
break;
case 69:
    
break;
case 70:
      yy.util.debug_log("FieldList -> FieldList Field");
      this.$ = $$[$0-1];
      this.$.append($$[$0]);
    
break;
case 71:
      yy.util.debug_log("FieldList -> ");
      this.$ = new yy.t_struct(yy.g_program);
    
break;
case 72:
      yy.util.debug_log("Field -> FieldIdentifier FieldRequiredness FieldType tok_identifier FieldValue XsdOptional XsdNillable XsdAttributes TypeAnnotations CommaOrSemicolonOptional");
      this.$ = new yy.t_field($$[$0-7], $$[$0-6], $$[$0-9]);
      this.$.set_req($$[$0-8]);
      if ($$[$0-10] != null) {
        this.$.set_doc($$[$0-10]);
      };
      if ($$[$0-5] != null) {
        this.$.set_value($$[$0-5]);
      };
    
break;
case 73:
      yy.util.debug_log("FieldIdentifier -> tok_int_constant");
    
break;
case 74:
      yy.util.debug_log("FieldIdentifier -> ");
    
break;
case 75:
      yy.util.debug_log("FieldRequiredness -> tok_required");
    
break;
case 76:
      yy.util.debug_log("FieldRequiredness -> tok_optional");
    
break;
case 77:
    
break;
case 78:
      this.$ = $$[$0];
    
break;
case 79:
    
break;
case 80:
      yy.util.debug_log("FunctionType -> FieldType");
      this.$ = $$[$0];
    
break;
case 81:
      yy.util.debug_log("FunctionType -> tok_void");
    
break;
case 82:
      yy.util.debug_log("FieldType -> tok_identifier");
    
break;
case 83:
      yy.util.debug_log("FieldType -> BaseType");
      this.$ = $$[$0];
    
break;
case 84:
      yy.util.debug_log("FieldType -> ContainerType");
      this.$ = $$[$0];
    
break;
case 85:
      yy.util.debug_log("BaseType -> SimpleBaseType TypeAnnotations");
      if ($$[$0] !== null) {
          this.$ = new yy.t_base_type($$[$0-1]);
      } else {
          this.$ = $$[$0-1];
      }
    
break;
case 86:
      yy.util.debug_log("BaseType -> tok_string");
    
break;
case 87:
      yy.util.debug_log("BaseType -> tok_binary");
    
break;
case 88:
      yy.util.debug_log("BaseType -> tok_slist");
    
break;
case 89:
      yy.util.debug_log("BaseType -> tok_bool");
    
break;
case 90:
      yy.util.debug_log("BaseType -> tok_byte");
    
break;
case 91:
      yy.util.debug_log("BaseType -> tok_i16");
    
break;
case 92:
      yy.util.debug_log("BaseType -> tok_i32");
    
break;
case 93:
      yy.util.debug_log("BaseType -> tok_i64");
    
break;
case 94:
      yy.util.debug_log("BaseType -> tok_double");
    
break;
case 95:
      yy.util.debug_log("ContainerType -> SimpleContainerType TypeAnnotations");
      this.$ = $$[$0-1];
    
break;
case 96:
      yy.util.debug_log("SimpleContainerType -> MapType");
      this.$ = $$[$0];
    
break;
case 97:
      yy.util.debug_log("SimpleContainerType -> SetType");
      this.$ = $$[$0];
    
break;
case 98:
      yy.util.debug_log("SimpleContainerType -> ListType");
      this.$ = $$[$0];
    
break;
case 99:
      yy.util.debug_log("MapType -> tok_map <FieldType, FieldType>");
      this.$ = new yy.t_map($$[$0-3], $$[$0-1]);
    
break;
case 100:
      yy.util.debug_log("SetType -> tok_set<FieldType>");
      this.$ = new yy.t_set($$[$0-1]);
    
break;
case 101:
      yy.util.debug_log("ListType -> tok_list<FieldType>");
      this.$ = new yy.t_list($$[$0-2]);
    
break;
case 102:
      this.$ = $$[$0];
    
break;
case 103:
      this.$ = null;
    
break;
case 104:
      yy.util.debug_log("TypeAnnotations -> ( TypeAnnotationList )");
    
break;
case 105:
    
break;
case 106:
      yy.util.debug_log("TypeAnnotationList -> TypeAnnotationList , TypeAnnotation");
    
break;
case 107:
    
break;
case 108:
      yy.util.debug_log("TypeAnnotation -> tok_identifier = tok_literal");
    
break;
case 113: 
break;
case 115: 
break;
case 117: 
break;
case 119: 
break;
}
},
table: [{1:[2,3],3:1,4:2,7:3,10:[2,3],13:[2,3],14:[2,3],16:[2,3],17:[2,3],18:[2,3],19:[2,3],20:[2,3],22:[2,3],23:[2,3],24:[2,3],25:[2,3],26:[2,3],27:[2,3],28:[2,3],33:[2,3],54:[2,3],55:[2,3],58:[2,3],62:[2,3],63:[2,3],67:[2,3],68:[2,3]},{1:[3]},{1:[2,24],5:4,8:5,9:6,10:[1,7],13:[1,8],14:[1,9],16:[1,10],17:[1,11],18:[1,12],19:[1,13],20:[1,14],22:[1,15],23:[1,16],24:[1,17],25:[1,18],26:[1,19],27:[1,20],28:[1,21],33:[2,24],54:[2,24],55:[2,24],58:[2,24],62:[2,24],63:[2,24],67:[2,24],68:[2,24]},{1:[2,5],10:[2,5],13:[2,5],14:[2,5],16:[2,5],17:[2,5],18:[2,5],19:[2,5],20:[2,5],22:[2,5],23:[2,5],24:[2,5],25:[2,5],26:[2,5],27:[2,5],28:[2,5],33:[2,5],54:[2,5],55:[2,5],58:[2,5],62:[2,5],63:[2,5],67:[2,5],68:[2,5]},{1:[2,1],6:22,33:[2,2],54:[2,2],55:[2,2],58:[2,2],62:[2,2],63:[2,2],67:[2,2],68:[2,2]},{1:[2,3],7:23,10:[2,3],13:[2,3],14:[2,3],16:[2,3],17:[2,3],18:[2,3],19:[2,3],20:[2,3],22:[2,3],23:[2,3],24:[2,3],25:[2,3],26:[2,3],27:[2,3],28:[2,3],33:[2,3],54:[2,3],55:[2,3],58:[2,3],62:[2,3],63:[2,3],67:[2,3],68:[2,3]},{1:[2,6],10:[2,6],13:[2,6],14:[2,6],16:[2,6],17:[2,6],18:[2,6],19:[2,6],20:[2,6],22:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],28:[2,6],33:[2,6],54:[2,6],55:[2,6],58:[2,6],62:[2,6],63:[2,6],67:[2,6],68:[2,6]},{11:[1,24],12:[1,25]},{11:[1,26]},{15:[1,27]},{11:[1,28]},{11:[1,29]},{11:[1,30]},{11:[1,31]},{21:[1,32]},{11:[1,33]},{11:[1,34]},{11:[1,35]},{15:[1,36]},{11:[1,37]},{11:[1,38]},{15:[1,39]},{29:40,30:41,31:42,32:43,33:[1,44],49:45,50:46,51:47,52:48,53:49,54:[1,51],55:[1,52],58:[1,53],61:54,62:[1,56],63:[1,57],67:[1,55],68:[1,50]},{1:[2,4],10:[2,4],13:[2,4],14:[2,4],16:[2,4],17:[2,4],18:[2,4],19:[2,4],20:[2,4],22:[2,4],23:[2,4],24:[2,4],25:[2,4],26:[2,4],27:[2,4],28:[2,4],33:[2,4],54:[2,4],55:[2,4],58:[2,4],62:[2,4],63:[2,4],67:[2,4],68:[2,4]},{11:[1,58]},{11:[1,59]},{1:[2,9],10:[2,9],13:[2,9],14:[2,9],16:[2,9],17:[2,9],18:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],27:[2,9],28:[2,9],33:[2,9],54:[2,9],55:[2,9],58:[2,9],62:[2,9],63:[2,9],67:[2,9],68:[2,9]},{1:[2,10],10:[2,10],13:[2,10],14:[2,10],16:[2,10],17:[2,10],18:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],24:[2,10],25:[2,10],26:[2,10],27:[2,10],28:[2,10],33:[2,10],54:[2,10],55:[2,10],58:[2,10],62:[2,10],63:[2,10],67:[2,10],68:[2,10]},{1:[2,11],10:[2,11],13:[2,11],14:[2,11],16:[2,11],17:[2,11],18:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],24:[2,11],25:[2,11],26:[2,11],27:[2,11],28:[2,11],33:[2,11],54:[2,11],55:[2,11],58:[2,11],62:[2,11],63:[2,11],67:[2,11],68:[2,11]},{1:[2,12],10:[2,12],13:[2,12],14:[2,12],16:[2,12],17:[2,12],18:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],24:[2,12],25:[2,12],26:[2,12],27:[2,12],28:[2,12],33:[2,12],54:[2,12],55:[2,12],58:[2,12],62:[2,12],63:[2,12],67:[2,12],68:[2,12]},{1:[2,13],10:[2,13],13:[2,13],14:[2,13],16:[2,13],17:[2,13],18:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],27:[2,13],28:[2,13],33:[2,13],54:[2,13],55:[2,13],58:[2,13],62:[2,13],63:[2,13],67:[2,13],68:[2,13]},{1:[2,14],10:[2,14],13:[2,14],14:[2,14],16:[2,14],17:[2,14],18:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],24:[2,14],25:[2,14],26:[2,14],27:[2,14],28:[2,14],33:[2,14],54:[2,14],55:[2,14],58:[2,14],62:[2,14],63:[2,14],67:[2,14],68:[2,14]},{1:[2,15],10:[2,15],13:[2,15],14:[2,15],16:[2,15],17:[2,15],18:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],27:[2,15],28:[2,15],33:[2,15],54:[2,15],55:[2,15],58:[2,15],62:[2,15],63:[2,15],67:[2,15],68:[2,15]},{1:[2,16],10:[2,16],13:[2,16],14:[2,16],16:[2,16],17:[2,16],18:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],24:[2,16],25:[2,16],26:[2,16],27:[2,16],28:[2,16],33:[2,16],54:[2,16],55:[2,16],58:[2,16],62:[2,16],63:[2,16],67:[2,16],68:[2,16]},{1:[2,17],10:[2,17],13:[2,17],14:[2,17],16:[2,17],17:[2,17],18:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],24:[2,17],25:[2,17],26:[2,17],27:[2,17],28:[2,17],33:[2,17],54:[2,17],55:[2,17],58:[2,17],62:[2,17],63:[2,17],67:[2,17],68:[2,17]},{1:[2,18],10:[2,18],13:[2,18],14:[2,18],16:[2,18],17:[2,18],18:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],24:[2,18],25:[2,18],26:[2,18],27:[2,18],28:[2,18],33:[2,18],54:[2,18],55:[2,18],58:[2,18],62:[2,18],63:[2,18],67:[2,18],68:[2,18]},{1:[2,19],10:[2,19],13:[2,19],14:[2,19],16:[2,19],17:[2,19],18:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],24:[2,19],25:[2,19],26:[2,19],27:[2,19],28:[2,19],33:[2,19],54:[2,19],55:[2,19],58:[2,19],62:[2,19],63:[2,19],67:[2,19],68:[2,19]},{1:[2,20],10:[2,20],13:[2,20],14:[2,20],16:[2,20],17:[2,20],18:[2,20],19:[2,20],20:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[2,20],27:[2,20],28:[2,20],33:[2,20],54:[2,20],55:[2,20],58:[2,20],62:[2,20],63:[2,20],67:[2,20],68:[2,20]},{1:[2,21],10:[2,21],13:[2,21],14:[2,21],16:[2,21],17:[2,21],18:[2,21],19:[2,21],20:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],26:[2,21],27:[2,21],28:[2,21],33:[2,21],54:[2,21],55:[2,21],58:[2,21],62:[2,21],63:[2,21],67:[2,21],68:[2,21]},{1:[2,22],10:[2,22],13:[2,22],14:[2,22],16:[2,22],17:[2,22],18:[2,22],19:[2,22],20:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],27:[2,22],28:[2,22],33:[2,22],54:[2,22],55:[2,22],58:[2,22],62:[2,22],63:[2,22],67:[2,22],68:[2,22]},{1:[2,23],33:[2,23],54:[2,23],55:[2,23],58:[2,23],62:[2,23],63:[2,23],67:[2,23],68:[2,23]},{1:[2,25],33:[2,25],54:[2,25],55:[2,25],58:[2,25],62:[2,25],63:[2,25],67:[2,25],68:[2,25]},{1:[2,26],33:[2,26],54:[2,26],55:[2,26],58:[2,26],62:[2,26],63:[2,26],67:[2,26],68:[2,26]},{1:[2,27],33:[2,27],54:[2,27],55:[2,27],58:[2,27],62:[2,27],63:[2,27],67:[2,27],68:[2,27]},{11:[1,61],34:60,90:62,91:63,92:64,93:[1,66],94:[1,67],95:[1,68],96:[1,69],97:[1,70],98:[1,71],99:[1,72],100:[1,73],101:[1,74],102:65,103:75,104:76,105:77,106:[1,78],111:[1,79],112:[1,80]},{1:[2,41],33:[2,41],54:[2,41],55:[2,41],58:[2,41],62:[2,41],63:[2,41],67:[2,41],68:[2,41]},{1:[2,42],33:[2,42],54:[2,42],55:[2,42],58:[2,42],62:[2,42],63:[2,42],67:[2,42],68:[2,42]},{1:[2,43],33:[2,43],54:[2,43],55:[2,43],58:[2,43],62:[2,43],63:[2,43],67:[2,43],68:[2,43]},{1:[2,44],33:[2,44],54:[2,44],55:[2,44],58:[2,44],62:[2,44],63:[2,44],67:[2,44],68:[2,44]},{1:[2,45],33:[2,45],54:[2,45],55:[2,45],58:[2,45],62:[2,45],63:[2,45],67:[2,45],68:[2,45]},{11:[1,81]},{11:[1,61],34:82,90:62,91:63,92:64,93:[1,66],94:[1,67],95:[1,68],96:[1,69],97:[1,70],98:[1,71],99:[1,72],100:[1,73],101:[1,74],102:65,103:75,104:76,105:77,106:[1,78],111:[1,79],112:[1,80]},{11:[1,83]},{11:[1,84]},{11:[1,85]},{11:[1,86]},{11:[2,56]},{11:[2,57]},{1:[2,7],10:[2,7],13:[2,7],14:[2,7],16:[2,7],17:[2,7],18:[2,7],19:[2,7],20:[2,7],22:[2,7],23:[2,7],24:[2,7],25:[2,7],26:[2,7],27:[2,7],28:[2,7],33:[2,7],54:[2,7],55:[2,7],58:[2,7],62:[2,7],63:[2,7],67:[2,7],68:[2,7]},{1:[2,8],10:[2,8],13:[2,8],14:[2,8],16:[2,8],17:[2,8],18:[2,8],19:[2,8],20:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],28:[2,8],33:[2,8],54:[2,8],55:[2,8],58:[2,8],62:[2,8],63:[2,8],67:[2,8],68:[2,8]},{11:[1,87]},{11:[2,82],109:[2,82],110:[2,82]},{11:[2,83],109:[2,83],110:[2,83]},{11:[2,84],109:[2,84],110:[2,84]},{11:[2,105],66:88,75:[1,89],109:[2,105],110:[2,105]},{11:[2,105],66:90,75:[1,89],109:[2,105],110:[2,105]},{11:[2,86],75:[2,86],109:[2,86],110:[2,86]},{11:[2,87],75:[2,87],109:[2,87],110:[2,87]},{11:[2,88],75:[2,88],109:[2,88],110:[2,88]},{11:[2,89],75:[2,89],109:[2,89],110:[2,89]},{11:[2,90],75:[2,90],109:[2,90],110:[2,90]},{11:[2,91],75:[2,91],109:[2,91],110:[2,91]},{11:[2,92],75:[2,92],109:[2,92],110:[2,92]},{11:[2,93],75:[2,93],109:[2,93],110:[2,93]},{11:[2,94],75:[2,94],109:[2,94],110:[2,94]},{11:[2,96],75:[2,96],109:[2,96],110:[2,96]},{11:[2,97],75:[2,97],109:[2,97],110:[2,97]},{11:[2,98],75:[2,98],109:[2,98],110:[2,98]},{107:91,108:[2,103],113:[1,92]},{107:93,108:[2,103],113:[1,92]},{108:[1,94]},{45:[2,62],69:95,71:[1,96]},{11:[1,97]},{45:[1,98]},{45:[1,99]},{45:[2,113],64:100,117:[1,101]},{45:[1,102]},{35:[1,103]},{11:[2,85],109:[2,85],110:[2,85]},{11:[2,107],76:[2,107],114:104},{11:[2,95],109:[2,95],110:[2,95]},{108:[1,105]},{15:[1,106]},{108:[1,107]},{11:[1,61],34:108,90:62,91:63,92:64,93:[1,66],94:[1,67],95:[1,68],96:[1,69],97:[1,70],98:[1,71],99:[1,72],100:[1,73],101:[1,74],102:65,103:75,104:76,105:77,106:[1,78],111:[1,79],112:[1,80]},{45:[1,109]},{11:[1,110]},{1:[2,46],33:[2,46],54:[2,46],55:[2,46],58:[2,46],62:[2,46],63:[2,46],67:[2,46],68:[2,46]},{11:[2,49],47:[2,49],56:111},{15:[2,54],47:[2,54],59:112},{45:[1,113]},{45:[2,112]},{11:[2,71],38:[2,71],47:[2,71],65:114,87:[2,71],88:[2,71],93:[2,71],94:[2,71],95:[2,71],96:[2,71],97:[2,71],98:[2,71],99:[2,71],100:[2,71],101:[2,71],106:[2,71],111:[2,71],112:[2,71]},{11:[1,119],15:[1,118],36:115,38:[1,116],39:[1,117],40:120,41:121,42:[1,122],45:[1,123]},{11:[1,126],76:[1,124],115:125},{11:[1,61],34:127,90:62,91:63,92:64,93:[1,66],94:[1,67],95:[1,68],96:[1,69],97:[1,70],98:[1,71],99:[1,72],100:[1,73],101:[1,74],102:65,103:75,104:76,105:77,106:[1,78],111:[1,79],112:[1,80]},{11:[2,102],75:[2,102],108:[2,102],109:[2,102],110:[2,102]},{11:[1,61],34:128,90:62,91:63,92:64,93:[1,66],94:[1,67],95:[1,68],96:[1,69],97:[1,70],98:[1,71],99:[1,72],100:[1,73],101:[1,74],102:65,103:75,104:76,105:77,106:[1,78],111:[1,79],112:[1,80]},{110:[1,129]},{11:[2,64],47:[2,64],70:130,78:[2,64],89:[2,64],93:[2,64],94:[2,64],95:[2,64],96:[2,64],97:[2,64],98:[2,64],99:[2,64],100:[2,64],101:[2,64],106:[2,64],111:[2,64],112:[2,64]},{45:[2,61]},{6:133,11:[2,2],47:[1,131],57:132},{15:[1,136],47:[1,134],60:135},{11:[2,71],38:[2,71],47:[2,71],65:137,87:[2,71],88:[2,71],93:[2,71],94:[2,71],95:[2,71],96:[2,71],97:[2,71],98:[2,71],99:[2,71],100:[2,71],101:[2,71],106:[2,71],111:[2,71],112:[2,71]},{6:140,11:[2,2],38:[2,2],47:[1,138],80:139,87:[2,2],88:[2,2],93:[2,2],94:[2,2],95:[2,2],96:[2,2],97:[2,2],98:[2,2],99:[2,2],100:[2,2],101:[2,2],106:[2,2],111:[2,2],112:[2,2]},{1:[2,111],33:[2,111],37:141,54:[2,111],55:[2,111],58:[2,111],62:[2,111],63:[2,111],67:[2,111],68:[2,111],109:[1,142],116:[1,143]},{1:[2,29],11:[2,29],15:[2,29],33:[2,29],38:[2,29],39:[2,29],42:[2,29],44:[2,29],45:[2,29],47:[2,29],48:[2,29],54:[2,29],55:[2,29],58:[2,29],62:[2,29],63:[2,29],67:[2,29],68:[2,29],75:[2,29],76:[2,29],87:[2,29],88:[2,29],93:[2,29],94:[2,29],95:[2,29],96:[2,29],97:[2,29],98:[2,29],99:[2,29],100:[2,29],101:[2,29],106:[2,29],109:[2,29],111:[2,29],112:[2,29],116:[2,29],118:[2,29],119:[2,29],120:[2,29]},{1:[2,30],11:[2,30],15:[2,30],33:[2,30],38:[2,30],39:[2,30],42:[2,30],44:[2,30],45:[2,30],47:[2,30],48:[2,30],54:[2,30],55:[2,30],58:[2,30],62:[2,30],63:[2,30],67:[2,30],68:[2,30],75:[2,30],76:[2,30],87:[2,30],88:[2,30],93:[2,30],94:[2,30],95:[2,30],96:[2,30],97:[2,30],98:[2,30],99:[2,30],100:[2,30],101:[2,30],106:[2,30],109:[2,30],111:[2,30],112:[2,30],116:[2,30],118:[2,30],119:[2,30],120:[2,30]},{1:[2,31],11:[2,31],15:[2,31],33:[2,31],38:[2,31],39:[2,31],42:[2,31],44:[2,31],45:[2,31],47:[2,31],48:[2,31],54:[2,31],55:[2,31],58:[2,31],62:[2,31],63:[2,31],67:[2,31],68:[2,31],75:[2,31],76:[2,31],87:[2,31],88:[2,31],93:[2,31],94:[2,31],95:[2,31],96:[2,31],97:[2,31],98:[2,31],99:[2,31],100:[2,31],101:[2,31],106:[2,31],109:[2,31],111:[2,31],112:[2,31],116:[2,31],118:[2,31],119:[2,31],120:[2,31]},{1:[2,32],11:[2,32],15:[2,32],33:[2,32],38:[2,32],39:[2,32],42:[2,32],44:[2,32],45:[2,32],47:[2,32],48:[2,32],54:[2,32],55:[2,32],58:[2,32],62:[2,32],63:[2,32],67:[2,32],68:[2,32],75:[2,32],76:[2,32],87:[2,32],88:[2,32],93:[2,32],94:[2,32],95:[2,32],96:[2,32],97:[2,32],98:[2,32],99:[2,32],100:[2,32],101:[2,32],106:[2,32],109:[2,32],111:[2,32],112:[2,32],116:[2,32],118:[2,32],119:[2,32],120:[2,32]},{1:[2,33],11:[2,33],15:[2,33],33:[2,33],38:[2,33],39:[2,33],42:[2,33],44:[2,33],45:[2,33],47:[2,33],48:[2,33],54:[2,33],55:[2,33],58:[2,33],62:[2,33],63:[2,33],67:[2,33],68:[2,33],75:[2,33],76:[2,33],87:[2,33],88:[2,33],93:[2,33],94:[2,33],95:[2,33],96:[2,33],97:[2,33],98:[2,33],99:[2,33],100:[2,33],101:[2,33],106:[2,33],109:[2,33],111:[2,33],112:[2,33],116:[2,33],118:[2,33],119:[2,33],120:[2,33]},{1:[2,34],11:[2,34],15:[2,34],33:[2,34],38:[2,34],39:[2,34],42:[2,34],44:[2,34],45:[2,34],47:[2,34],48:[2,34],54:[2,34],55:[2,34],58:[2,34],62:[2,34],63:[2,34],67:[2,34],68:[2,34],75:[2,34],76:[2,34],87:[2,34],88:[2,34],93:[2,34],94:[2,34],95:[2,34],96:[2,34],97:[2,34],98:[2,34],99:[2,34],100:[2,34],101:[2,34],106:[2,34],109:[2,34],111:[2,34],112:[2,34],116:[2,34],118:[2,34],119:[2,34],120:[2,34]},{11:[2,37],15:[2,37],38:[2,37],39:[2,37],42:[2,37],43:144,44:[2,37],45:[2,37]},{11:[2,40],15:[2,40],38:[2,40],39:[2,40],42:[2,40],45:[2,40],46:145,47:[2,40]},{1:[2,104],11:[2,104],33:[2,104],38:[2,104],47:[2,104],54:[2,104],55:[2,104],58:[2,104],62:[2,104],63:[2,104],67:[2,104],68:[2,104],76:[2,104],87:[2,104],88:[2,104],93:[2,104],94:[2,104],95:[2,104],96:[2,104],97:[2,104],98:[2,104],99:[2,104],100:[2,104],101:[2,104],106:[2,104],109:[2,104],110:[2,104],111:[2,104],112:[2,104],116:[2,104]},{11:[2,106],76:[2,106]},{35:[1,146]},{109:[1,147]},{110:[1,148]},{11:[2,103],75:[2,103],107:149,109:[2,103],110:[2,103],113:[1,92]},{6:152,11:[2,2],47:[1,150],72:151,78:[2,2],89:[2,2],93:[2,2],94:[2,2],95:[2,2],96:[2,2],97:[2,2],98:[2,2],99:[2,2],100:[2,2],101:[2,2],106:[2,2],111:[2,2],112:[2,2]},{1:[2,47],33:[2,47],54:[2,47],55:[2,47],58:[2,47],62:[2,47],63:[2,47],67:[2,47],68:[2,47]},{11:[2,48],47:[2,48]},{11:[1,153]},{1:[2,52],33:[2,52],54:[2,52],55:[2,52],58:[2,52],62:[2,52],63:[2,52],67:[2,52],68:[2,52]},{15:[2,53],47:[2,53]},{15:[2,111],37:154,47:[2,111],109:[1,142],116:[1,143]},{6:140,11:[2,2],38:[2,2],47:[1,155],80:139,87:[2,2],88:[2,2],93:[2,2],94:[2,2],95:[2,2],96:[2,2],97:[2,2],98:[2,2],99:[2,2],100:[2,2],101:[2,2],106:[2,2],111:[2,2],112:[2,2]},{1:[2,59],33:[2,59],54:[2,59],55:[2,59],58:[2,59],62:[2,59],63:[2,59],67:[2,59],68:[2,59]},{11:[2,70],38:[2,70],47:[2,70],76:[2,70],87:[2,70],88:[2,70],93:[2,70],94:[2,70],95:[2,70],96:[2,70],97:[2,70],98:[2,70],99:[2,70],100:[2,70],101:[2,70],106:[2,70],111:[2,70],112:[2,70]},{11:[2,74],38:[1,157],81:156,87:[2,74],88:[2,74],93:[2,74],94:[2,74],95:[2,74],96:[2,74],97:[2,74],98:[2,74],99:[2,74],100:[2,74],101:[2,74],106:[2,74],111:[2,74],112:[2,74]},{1:[2,28],33:[2,28],54:[2,28],55:[2,28],58:[2,28],62:[2,28],63:[2,28],67:[2,28],68:[2,28]},{1:[2,109],11:[2,109],15:[2,109],33:[2,109],38:[2,109],39:[2,109],42:[2,109],44:[2,109],45:[2,109],47:[2,109],54:[2,109],55:[2,109],58:[2,109],62:[2,109],63:[2,109],67:[2,109],68:[2,109],76:[2,109],78:[2,109],87:[2,109],88:[2,109],89:[2,109],93:[2,109],94:[2,109],95:[2,109],96:[2,109],97:[2,109],98:[2,109],99:[2,109],100:[2,109],101:[2,109],106:[2,109],111:[2,109],112:[2,109]},{1:[2,110],11:[2,110],15:[2,110],33:[2,110],38:[2,110],39:[2,110],42:[2,110],44:[2,110],45:[2,110],47:[2,110],54:[2,110],55:[2,110],58:[2,110],62:[2,110],63:[2,110],67:[2,110],68:[2,110],76:[2,110],78:[2,110],87:[2,110],88:[2,110],89:[2,110],93:[2,110],94:[2,110],95:[2,110],96:[2,110],97:[2,110],98:[2,110],99:[2,110],100:[2,110],101:[2,110],106:[2,110],111:[2,110],112:[2,110]},{11:[1,119],15:[1,118],36:159,38:[1,116],39:[1,117],40:120,41:121,42:[1,122],44:[1,158],45:[1,123]},{11:[1,119],15:[1,118],36:161,38:[1,116],39:[1,117],40:120,41:121,42:[1,122],45:[1,123],47:[1,160]},{15:[1,162]},{11:[1,61],34:163,90:62,91:63,92:64,93:[1,66],94:[1,67],95:[1,68],96:[1,69],97:[1,70],98:[1,71],99:[1,72],100:[1,73],101:[1,74],102:65,103:75,104:76,105:77,106:[1,78],111:[1,79],112:[1,80]},{11:[2,100],75:[2,100],109:[2,100],110:[2,100]},{11:[2,101],75:[2,101],109:[2,101],110:[2,101]},{1:[2,60],33:[2,60],54:[2,60],55:[2,60],58:[2,60],62:[2,60],63:[2,60],67:[2,60],68:[2,60]},{11:[2,63],47:[2,63],78:[2,63],89:[2,63],93:[2,63],94:[2,63],95:[2,63],96:[2,63],97:[2,63],98:[2,63],99:[2,63],100:[2,63],101:[2,63],106:[2,63],111:[2,63],112:[2,63]},{11:[2,67],73:164,78:[1,165],89:[2,67],93:[2,67],94:[2,67],95:[2,67],96:[2,67],97:[2,67],98:[2,67],99:[2,67],100:[2,67],101:[2,67],106:[2,67],111:[2,67],112:[2,67]},{11:[2,111],35:[1,166],37:167,47:[2,111],109:[1,142],116:[1,143]},{15:[2,55],47:[2,55]},{1:[2,105],33:[2,105],54:[2,105],55:[2,105],58:[2,105],62:[2,105],63:[2,105],66:168,67:[2,105],68:[2,105],75:[1,89]},{11:[2,77],82:169,87:[1,170],88:[1,171],93:[2,77],94:[2,77],95:[2,77],96:[2,77],97:[2,77],98:[2,77],99:[2,77],100:[2,77],101:[2,77],106:[2,77],111:[2,77],112:[2,77]},{48:[1,172]},{1:[2,35],11:[2,35],15:[2,35],33:[2,35],38:[2,35],39:[2,35],42:[2,35],44:[2,35],45:[2,35],47:[2,35],48:[2,35],54:[2,35],55:[2,35],58:[2,35],62:[2,35],63:[2,35],67:[2,35],68:[2,35],75:[2,35],76:[2,35],87:[2,35],88:[2,35],93:[2,35],94:[2,35],95:[2,35],96:[2,35],97:[2,35],98:[2,35],99:[2,35],100:[2,35],101:[2,35],106:[2,35],109:[2,35],111:[2,35],112:[2,35],116:[2,35],118:[2,35],119:[2,35],120:[2,35]},{11:[2,111],15:[2,111],37:173,38:[2,111],39:[2,111],42:[2,111],44:[2,111],45:[2,111],109:[1,142],116:[1,143]},{1:[2,38],11:[2,38],15:[2,38],33:[2,38],38:[2,38],39:[2,38],42:[2,38],44:[2,38],45:[2,38],47:[2,38],48:[2,38],54:[2,38],55:[2,38],58:[2,38],62:[2,38],63:[2,38],67:[2,38],68:[2,38],75:[2,38],76:[2,38],87:[2,38],88:[2,38],93:[2,38],94:[2,38],95:[2,38],96:[2,38],97:[2,38],98:[2,38],99:[2,38],100:[2,38],101:[2,38],106:[2,38],109:[2,38],111:[2,38],112:[2,38],116:[2,38],118:[2,38],119:[2,38],120:[2,38]},{48:[1,174]},{11:[2,111],37:175,76:[2,111],109:[1,142],116:[1,143]},{110:[1,176]},{11:[1,61],34:178,74:177,89:[1,179],90:62,91:63,92:64,93:[1,66],94:[1,67],95:[1,68],96:[1,69],97:[1,70],98:[1,71],99:[1,72],100:[1,73],101:[1,74],102:65,103:75,104:76,105:77,106:[1,78],111:[1,79],112:[1,80]},{11:[2,66],89:[2,66],93:[2,66],94:[2,66],95:[2,66],96:[2,66],97:[2,66],98:[2,66],99:[2,66],100:[2,66],101:[2,66],106:[2,66],111:[2,66],112:[2,66]},{38:[1,180]},{11:[2,51],47:[2,51]},{1:[2,58],33:[2,58],54:[2,58],55:[2,58],58:[2,58],62:[2,58],63:[2,58],67:[2,58],68:[2,58]},{11:[1,61],34:181,90:62,91:63,92:64,93:[1,66],94:[1,67],95:[1,68],96:[1,69],97:[1,70],98:[1,71],99:[1,72],100:[1,73],101:[1,74],102:65,103:75,104:76,105:77,106:[1,78],111:[1,79],112:[1,80]},{11:[2,75],93:[2,75],94:[2,75],95:[2,75],96:[2,75],97:[2,75],98:[2,75],99:[2,75],100:[2,75],101:[2,75],106:[2,75],111:[2,75],112:[2,75]},{11:[2,76],93:[2,76],94:[2,76],95:[2,76],96:[2,76],97:[2,76],98:[2,76],99:[2,76],100:[2,76],101:[2,76],106:[2,76],111:[2,76],112:[2,76]},{11:[2,73],87:[2,73],88:[2,73],93:[2,73],94:[2,73],95:[2,73],96:[2,73],97:[2,73],98:[2,73],99:[2,73],100:[2,73],101:[2,73],106:[2,73],111:[2,73],112:[2,73]},{11:[2,36],15:[2,36],38:[2,36],39:[2,36],42:[2,36],44:[2,36],45:[2,36]},{11:[1,119],15:[1,118],36:182,38:[1,116],39:[1,117],40:120,41:121,42:[1,122],45:[1,123]},{11:[2,108],76:[2,108]},{11:[2,99],75:[2,99],109:[2,99],110:[2,99]},{11:[1,183]},{11:[2,80]},{11:[2,81]},{11:[2,111],37:184,47:[2,111],109:[1,142],116:[1,143]},{11:[1,185]},{11:[2,111],15:[2,111],37:186,38:[2,111],39:[2,111],42:[2,111],45:[2,111],47:[2,111],109:[1,142],116:[1,143]},{75:[1,187]},{11:[2,50],47:[2,50]},{11:[2,79],35:[1,189],38:[2,79],47:[2,79],75:[2,79],76:[2,79],83:188,87:[2,79],88:[2,79],93:[2,79],94:[2,79],95:[2,79],96:[2,79],97:[2,79],98:[2,79],99:[2,79],100:[2,79],101:[2,79],106:[2,79],109:[2,79],111:[2,79],112:[2,79],116:[2,79],118:[2,79],119:[2,79],120:[2,79]},{11:[2,39],15:[2,39],38:[2,39],39:[2,39],42:[2,39],45:[2,39],47:[2,39]},{11:[2,71],38:[2,71],65:190,76:[2,71],87:[2,71],88:[2,71],93:[2,71],94:[2,71],95:[2,71],96:[2,71],97:[2,71],98:[2,71],99:[2,71],100:[2,71],101:[2,71],106:[2,71],111:[2,71],112:[2,71]},{11:[2,115],38:[2,115],47:[2,115],75:[2,115],76:[2,115],84:191,87:[2,115],88:[2,115],93:[2,115],94:[2,115],95:[2,115],96:[2,115],97:[2,115],98:[2,115],99:[2,115],100:[2,115],101:[2,115],106:[2,115],109:[2,115],111:[2,115],112:[2,115],116:[2,115],118:[1,192],119:[2,115],120:[2,115]},{11:[1,119],15:[1,118],36:193,38:[1,116],39:[1,117],40:120,41:121,42:[1,122],45:[1,123]},{6:140,11:[2,2],38:[2,2],76:[1,194],80:139,87:[2,2],88:[2,2],93:[2,2],94:[2,2],95:[2,2],96:[2,2],97:[2,2],98:[2,2],99:[2,2],100:[2,2],101:[2,2],106:[2,2],111:[2,2],112:[2,2]},{11:[2,117],38:[2,117],47:[2,117],75:[2,117],76:[2,117],85:195,87:[2,117],88:[2,117],93:[2,117],94:[2,117],95:[2,117],96:[2,117],97:[2,117],98:[2,117],99:[2,117],100:[2,117],101:[2,117],106:[2,117],109:[2,117],111:[2,117],112:[2,117],116:[2,117],119:[1,196],120:[2,117]},{11:[2,114],38:[2,114],47:[2,114],75:[2,114],76:[2,114],87:[2,114],88:[2,114],93:[2,114],94:[2,114],95:[2,114],96:[2,114],97:[2,114],98:[2,114],99:[2,114],100:[2,114],101:[2,114],106:[2,114],109:[2,114],111:[2,114],112:[2,114],116:[2,114],119:[2,114],120:[2,114]},{11:[2,78],38:[2,78],47:[2,78],75:[2,78],76:[2,78],87:[2,78],88:[2,78],93:[2,78],94:[2,78],95:[2,78],96:[2,78],97:[2,78],98:[2,78],99:[2,78],100:[2,78],101:[2,78],106:[2,78],109:[2,78],111:[2,78],112:[2,78],116:[2,78],118:[2,78],119:[2,78],120:[2,78]},{11:[2,69],47:[2,69],77:197,78:[2,69],79:[1,198],89:[2,69],93:[2,69],94:[2,69],95:[2,69],96:[2,69],97:[2,69],98:[2,69],99:[2,69],100:[2,69],101:[2,69],106:[2,69],109:[2,69],111:[2,69],112:[2,69],116:[2,69]},{11:[2,119],38:[2,119],47:[2,119],75:[2,119],76:[2,119],86:199,87:[2,119],88:[2,119],93:[2,119],94:[2,119],95:[2,119],96:[2,119],97:[2,119],98:[2,119],99:[2,119],100:[2,119],101:[2,119],106:[2,119],109:[2,119],111:[2,119],112:[2,119],116:[2,119],120:[1,200]},{11:[2,116],38:[2,116],47:[2,116],75:[2,116],76:[2,116],87:[2,116],88:[2,116],93:[2,116],94:[2,116],95:[2,116],96:[2,116],97:[2,116],98:[2,116],99:[2,116],100:[2,116],101:[2,116],106:[2,116],109:[2,116],111:[2,116],112:[2,116],116:[2,116],120:[2,116]},{11:[2,111],37:201,47:[2,111],78:[2,111],89:[2,111],93:[2,111],94:[2,111],95:[2,111],96:[2,111],97:[2,111],98:[2,111],99:[2,111],100:[2,111],101:[2,111],106:[2,111],109:[1,142],111:[2,111],112:[2,111],116:[1,143]},{75:[1,202]},{11:[2,105],38:[2,105],47:[2,105],66:203,75:[1,89],76:[2,105],87:[2,105],88:[2,105],93:[2,105],94:[2,105],95:[2,105],96:[2,105],97:[2,105],98:[2,105],99:[2,105],100:[2,105],101:[2,105],106:[2,105],109:[2,105],111:[2,105],112:[2,105],116:[2,105]},{45:[1,204]},{11:[2,65],47:[2,65],78:[2,65],89:[2,65],93:[2,65],94:[2,65],95:[2,65],96:[2,65],97:[2,65],98:[2,65],99:[2,65],100:[2,65],101:[2,65],106:[2,65],111:[2,65],112:[2,65]},{11:[2,71],38:[2,71],65:205,76:[2,71],87:[2,71],88:[2,71],93:[2,71],94:[2,71],95:[2,71],96:[2,71],97:[2,71],98:[2,71],99:[2,71],100:[2,71],101:[2,71],106:[2,71],111:[2,71],112:[2,71]},{11:[2,111],37:206,38:[2,111],47:[2,111],76:[2,111],87:[2,111],88:[2,111],93:[2,111],94:[2,111],95:[2,111],96:[2,111],97:[2,111],98:[2,111],99:[2,111],100:[2,111],101:[2,111],106:[2,111],109:[1,142],111:[2,111],112:[2,111],116:[1,143]},{11:[2,71],38:[2,71],47:[2,71],65:207,87:[2,71],88:[2,71],93:[2,71],94:[2,71],95:[2,71],96:[2,71],97:[2,71],98:[2,71],99:[2,71],100:[2,71],101:[2,71],106:[2,71],111:[2,71],112:[2,71]},{6:140,11:[2,2],38:[2,2],76:[1,208],80:139,87:[2,2],88:[2,2],93:[2,2],94:[2,2],95:[2,2],96:[2,2],97:[2,2],98:[2,2],99:[2,2],100:[2,2],101:[2,2],106:[2,2],111:[2,2],112:[2,2]},{11:[2,72],38:[2,72],47:[2,72],76:[2,72],87:[2,72],88:[2,72],93:[2,72],94:[2,72],95:[2,72],96:[2,72],97:[2,72],98:[2,72],99:[2,72],100:[2,72],101:[2,72],106:[2,72],111:[2,72],112:[2,72]},{6:140,11:[2,2],38:[2,2],47:[1,209],80:139,87:[2,2],88:[2,2],93:[2,2],94:[2,2],95:[2,2],96:[2,2],97:[2,2],98:[2,2],99:[2,2],100:[2,2],101:[2,2],106:[2,2],111:[2,2],112:[2,2]},{11:[2,68],47:[2,68],78:[2,68],89:[2,68],93:[2,68],94:[2,68],95:[2,68],96:[2,68],97:[2,68],98:[2,68],99:[2,68],100:[2,68],101:[2,68],106:[2,68],109:[2,68],111:[2,68],112:[2,68],116:[2,68]},{11:[2,118],38:[2,118],47:[2,118],75:[2,118],76:[2,118],87:[2,118],88:[2,118],93:[2,118],94:[2,118],95:[2,118],96:[2,118],97:[2,118],98:[2,118],99:[2,118],100:[2,118],101:[2,118],106:[2,118],109:[2,118],111:[2,118],112:[2,118],116:[2,118]}],
defaultActions: {56:[2,56],57:[2,57],101:[2,112],110:[2,61],178:[2,80],179:[2,81]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0: /* do nothing */                 
break;
case 1: /* do nothing */                 
break;
case 2: /* do nothing */                 
break;
case 3: /* do nothing */                 
break;
case 4: /* do nothing */                 
break;
case 5: return yy_.yytext[0];                
break;
case 6: return yy_.yytext[0];                
break;
case 7: yy_.yytext = "0"; return "tok_int_constant"; 
break;
case 8: yy_.yytext = "1"; return "tok_int_constant"; 
break;
case 9: return "tok_namespace";            
break;
case 10: return "tok_cpp_namespace";        
break;
case 11: return "tok_cpp_include";          
break;
case 12: return "tok_cpp_type";             
break;
case 13: return "tok_java_package";         
break;
case 14: return "tok_cocoa_prefix";         
break;
case 15: return "tok_csharp_namespace";     
break;
case 16: return "tok_delphi_namespace";     
break;
case 17: return "tok_php_namespace";        
break;
case 18: return "tok_py_module";            
break;
case 19: return "tok_perl_package";         
break;
case 20: return "tok_ruby_namespace";       
break;
case 21: return "tok_smalltalk_category";   
break;
case 22: return "tok_smalltalk_prefix";     
break;
case 23: return "tok_xsd_all";              
break;
case 24: return "tok_xsd_optional";         
break;
case 25: return "tok_xsd_nillable";         
break;
case 26: return "tok_xsd_namespace";        
break;
case 27: return "tok_xsd_attrs";            
break;
case 28: return "tok_include";              
break;
case 29: return "tok_void";                 
break;
case 30: return "tok_bool";                 
break;
case 31: return "tok_byte";                 
break;
case 32: return "tok_i16";                  
break;
case 33: return "tok_i32";                  
break;
case 34: return "tok_i64";                  
break;
case 35: return "tok_double";               
break;
case 36: return "tok_string";               
break;
case 37: return "tok_binary";               
break;
case 38: return "tok_slist";                
break;
case 39: return "tok_senum";                
break;
case 40: return "tok_map";                  
break;
case 41: return "tok_list";                 
break;
case 42: return "tok_set";                  
break;
case 43: return "tok_oneway";               
break;
case 44: return "tok_typedef";              
break;
case 45: return "tok_struct";               
break;
case 46: return "tok_union";                
break;
case 47: return "tok_xception";             
break;
case 48: return "tok_extends";              
break;
case 49: return "tok_throws";               
break;
case 50: return "tok_service";              
break;
case 51: return "tok_enum";                 
break;
case 52: return "tok_const";                
break;
case 53: return "tok_required";             
break;
case 54: return "tok_optional";             
break;
case 55:
  pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return "tok_oneway";

break;
case 56: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 57: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 58: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 59: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 60: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 61: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 62: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 63: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 64: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 65: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 66: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 67: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 68: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 69: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 70: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 71: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 72: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 73: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 74: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 75: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 76: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 77: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 78: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 79: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 80: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 81: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 82: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 83: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 84: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 85: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 86: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 87: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 88: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 89: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 90: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 91: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 92: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 93: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 94: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 95: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 96: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 97: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 98: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 99: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 100: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 101: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 102: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 103: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 104: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 105: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 106: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 107: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 108: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 109: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 110: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 111: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 112: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 113: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 114: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 115: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 116: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 117: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 118: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 119: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 120: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 121: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 122: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 123: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 124: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 125: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 126: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 127: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 128: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 129: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 130: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 131: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 132: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 133: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 134: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 135: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 136: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 137: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 138: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 139: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 140: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 141: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 142: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 143: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 144: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 145: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 146: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 147: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 148: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 149: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 150: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 151: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 152: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 153: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 154: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 155: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 156: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 157: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 158: this.yy.thrift_reserved_keyword(yy_.yytext); 
break;
case 159:
  $$ = Number(yy_.yytext);
  if ( $$ === Infinity ) {
    integer_overflow(yy_.yytext);
  }
  return "tok_int_constant";

break;
case 160:
  $$ = Number(yy_.yytext);
  if ( $$ === Infinity ) {
    integer_overflow(yy_.yytext);
  }
  return "tok_int_constant";

break;
case 161:
  $$ = Number(yy_.yytext);
  return "tok_dub_constant";

break;
case 162:
  return "tok_identifier";

break;
case 163:
  return "tok_st_identifier";

break;
case 164:
  var mark = yy_.yytext[0];
  var result;
  for(;;)
  {
    var ch = this.input();
    switch (ch) {
      case this.EOF:
        yyerror("End of file while read string at %d\n", yy_.yylineno);
        exit(1);
      case '\n':
        yyerror("End of line while read string at %d\n", yy_.yylineno - 1);
        exit(1);
      case '\\':
        ch = this.input();
        switch (ch) {
          case 'r':
            result += '\r';
            continue;
          case 'n':
            result += '\n';
            continue;
          case 't':
            result += '\t';
            continue;
          case '"':
            result += '"';
            continue;
          case '\'':
            result += '\'';
            continue;
          case '\\':
            result += '\\';
            continue;
          default:
            yyerror("Bad escape character\n");
            return -1;
        }
        break;
      default:
        if (ch == mark) {
          $$ = result;
          return "tok_literal";
        } else {
          result += ch;
        }
    }
  }

break;
case 165:
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  var g_parse_mode = 1; //AG: tmp
  var PROGRAM = 1;      //AG: tmp
  var clear_doctext = function() {
    //util.debug_log("clearing doctext");
  }; //AG: tmp
  var clean_up_doctext = function(g_doctext) {
    //util.debug_log("cleaning up doctext: "+g_doctext);
    return g_doctext;
  }; //AG: tmp
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = yy_.yytext.substr(3, yy_.yytext.length - 5);
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yy_.yylineno;
  }

break;
case 166:
  unexpected_token(yy_.yytext);

break;
case 167:
  /* Catch-all to let us catch "*" in the parser. */
  return Number(yy_.yytext[0]);

break;
}
};
lexer.rules = [/^(?:(([ \t\r\n]+)))/,/^(?:((\/\*\**\*\/)))/,/^(?:((\/\*[^*]\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)))/,/^(?:((\/\/[^\n]*)))/,/^(?:((#[^\n]*)))/,/^(?:(([:;\,\{\}\(\)\=<>\[\]])))/,/^(?:\*)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:namespace\b)/,/^(?:cpp_namespace\b)/,/^(?:cpp_include\b)/,/^(?:cpp_type\b)/,/^(?:java_package\b)/,/^(?:cocoa_prefix\b)/,/^(?:csharp_namespace\b)/,/^(?:delphi_namespace\b)/,/^(?:php_namespace\b)/,/^(?:py_module\b)/,/^(?:perl_package\b)/,/^(?:ruby_namespace\b)/,/^(?:smalltalk_category\b)/,/^(?:smalltalk_prefix\b)/,/^(?:xsd_all\b)/,/^(?:xsd_optional\b)/,/^(?:xsd_nillable\b)/,/^(?:xsd_namespace\b)/,/^(?:xsd_attrs\b)/,/^(?:include\b)/,/^(?:void\b)/,/^(?:bool\b)/,/^(?:byte\b)/,/^(?:i16\b)/,/^(?:i32\b)/,/^(?:i64\b)/,/^(?:double\b)/,/^(?:string\b)/,/^(?:binary\b)/,/^(?:slist\b)/,/^(?:senum\b)/,/^(?:map\b)/,/^(?:list\b)/,/^(?:set\b)/,/^(?:oneway\b)/,/^(?:typedef\b)/,/^(?:struct\b)/,/^(?:union\b)/,/^(?:exception\b)/,/^(?:extends\b)/,/^(?:throws\b)/,/^(?:service\b)/,/^(?:enum\b)/,/^(?:const\b)/,/^(?:required\b)/,/^(?:optional\b)/,/^(?:async\b)/,/^(?:BEGIN\b)/,/^(?:END\b)/,/^(?:__CLASS__\b)/,/^(?:__DIR__\b)/,/^(?:__FILE__\b)/,/^(?:__FUNCTION__\b)/,/^(?:__LINE__\b)/,/^(?:__METHOD__\b)/,/^(?:__NAMESPACE__\b)/,/^(?:abstract\b)/,/^(?:alias\b)/,/^(?:and\b)/,/^(?:args\b)/,/^(?:as\b)/,/^(?:assert\b)/,/^(?:begin\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:catch\b)/,/^(?:class\b)/,/^(?:clone\b)/,/^(?:continue\b)/,/^(?:declare\b)/,/^(?:def\b)/,/^(?:default\b)/,/^(?:del\b)/,/^(?:delete\b)/,/^(?:do\b)/,/^(?:dynamic\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:elseif\b)/,/^(?:elsif\b)/,/^(?:end\b)/,/^(?:enddeclare\b)/,/^(?:endfor\b)/,/^(?:endforeach\b)/,/^(?:endif\b)/,/^(?:endswitch\b)/,/^(?:endwhile\b)/,/^(?:ensure\b)/,/^(?:except\b)/,/^(?:exec\b)/,/^(?:finally\b)/,/^(?:float\b)/,/^(?:for\b)/,/^(?:foreach\b)/,/^(?:function\b)/,/^(?:global\b)/,/^(?:goto\b)/,/^(?:if\b)/,/^(?:implements\b)/,/^(?:import\b)/,/^(?:in\b)/,/^(?:inline\b)/,/^(?:instanceof\b)/,/^(?:interface\b)/,/^(?:is\b)/,/^(?:lambda\b)/,/^(?:module\b)/,/^(?:native\b)/,/^(?:new\b)/,/^(?:next\b)/,/^(?:nil\b)/,/^(?:not\b)/,/^(?:or\b)/,/^(?:pass\b)/,/^(?:public\b)/,/^(?:print\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:public\b)/,/^(?:raise\b)/,/^(?:redo\b)/,/^(?:rescue\b)/,/^(?:retry\b)/,/^(?:register\b)/,/^(?:return\b)/,/^(?:self\b)/,/^(?:sizeof\b)/,/^(?:static\b)/,/^(?:super\b)/,/^(?:switch\b)/,/^(?:synchronized\b)/,/^(?:then\b)/,/^(?:this\b)/,/^(?:throw\b)/,/^(?:transient\b)/,/^(?:try\b)/,/^(?:undef\b)/,/^(?:union\b)/,/^(?:unless\b)/,/^(?:unsigned\b)/,/^(?:until\b)/,/^(?:use\b)/,/^(?:var\b)/,/^(?:virtual\b)/,/^(?:volatile\b)/,/^(?:when\b)/,/^(?:while\b)/,/^(?:with\b)/,/^(?:xor\b)/,/^(?:yield\b)/,/^(?:(([+-]?[0-9]+(?!\.))))/,/^(?:((0x[0-9A-Fa-f]+)))/,/^(?:(([+-]?([0-9]*\.)?([0-9]+)([eE][+-]?[0-9]+)?)))/,/^(?:(([a-zA-Z_][\.a-zA-Z_0-9]*)))/,/^(?:(([a-zA-Z-][\.a-zA-Z_0-9-]*)))/,/^(?:((['\"])))/,/^(?:((\/\*\*([^*/]|[^*]\/|\*[^/])*\**\*\/)))/,/^(?:.)/,/^(?:.)/];
lexer.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = thriftweb;
exports.Parser = thriftweb.Parser;
exports.parse = function () { return thriftweb.parse.apply(thriftweb, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    var source, cwd;
    if (typeof process !== 'undefined') {
        source = require('fs').readFileSync(require('path').resolve(args[1]), "utf8");
    } else {
        source = require("file").path(require("file").cwd()).join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
}