/* Jison generated parser */
var thriftweb = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Program":3,"HeaderList":4,"DefinitionList":5,"CaptureDocText":6,"DestroyDocText":7,"Header":8,"Include":9,"tok_namespace":10,"tok_identifier":11,"*":12,"tok_cpp_namespace":13,"tok_cpp_include":14,"tok_literal":15,"tok_php_namespace":16,"tok_py_module":17,"tok_perl_package":18,"tok_ruby_namespace":19,"tok_smalltalk_category":20,"tok_st_identifier":21,"tok_smalltalk_prefix":22,"tok_java_package":23,"tok_cocoa_prefix":24,"tok_xsd_namespace":25,"tok_csharp_namespace":26,"tok_delphi_namespace":27,"tok_include":28,"Definition":29,"Const":30,"TypeDefinition":31,"Service":32,"Typedef":33,"Enum":34,"Senum":35,"Struct":36,"Xception":37,"tok_typedef":38,"FieldType":39,"CommaOrSemicolonOptional":40,",":41,";":42,"tok_enum":43,"{":44,"EnumDefList":45,"}":46,"EnumDef":47,"=":48,"tok_int_constant":49,"tok_senum":50,"SenumDefList":51,"SenumDef":52,"tok_const":53,"ConstValue":54,"tok_dub_constant":55,"ConstList":56,"ConstMap":57,"[":58,"ConstListContents":59,"]":60,"ConstMapContents":61,":":62,"StructHead":63,"tok_struct":64,"tok_union":65,"XsdAll":66,"FieldList":67,"TypeAnnotations":68,"tok_xsd_all":69,"XsdOptional":70,"tok_xsd_optional":71,"XsdNillable":72,"tok_xsd_nillable":73,"XsdAttributes":74,"tok_xsd_attrs":75,"tok_xception":76,"tok_service":77,"Extends":78,"FlagArgs":79,"FunctionList":80,"UnflagArgs":81,"tok_extends":82,"Function":83,"Oneway":84,"FunctionType":85,"(":86,")":87,"Throws":88,"tok_oneway":89,"tok_throws":90,"Field":91,"FieldIdentifier":92,"FieldRequiredness":93,"FieldValue":94,"tok_required":95,"tok_optional":96,"tok_void":97,"BaseType":98,"ContainerType":99,"SimpleBaseType":100,"tok_string":101,"tok_binary":102,"tok_slist":103,"tok_bool":104,"tok_byte":105,"tok_i16":106,"tok_i32":107,"tok_i64":108,"tok_double":109,"SimpleContainerType":110,"MapType":111,"SetType":112,"ListType":113,"tok_map":114,"CppType":115,"<":116,">":117,"tok_set":118,"tok_list":119,"tok_cpp_type":120,"TypeAnnotationList":121,"TypeAnnotation":122,"$accept":0,"$end":1},
terminals_: {2:"error",10:"tok_namespace",11:"tok_identifier",12:"*",13:"tok_cpp_namespace",14:"tok_cpp_include",15:"tok_literal",16:"tok_php_namespace",17:"tok_py_module",18:"tok_perl_package",19:"tok_ruby_namespace",20:"tok_smalltalk_category",21:"tok_st_identifier",22:"tok_smalltalk_prefix",23:"tok_java_package",24:"tok_cocoa_prefix",25:"tok_xsd_namespace",26:"tok_csharp_namespace",27:"tok_delphi_namespace",28:"tok_include",38:"tok_typedef",41:",",42:";",43:"tok_enum",44:"{",46:"}",48:"=",49:"tok_int_constant",50:"tok_senum",53:"tok_const",55:"tok_dub_constant",58:"[",60:"]",62:":",64:"tok_struct",65:"tok_union",69:"tok_xsd_all",71:"tok_xsd_optional",73:"tok_xsd_nillable",75:"tok_xsd_attrs",76:"tok_xception",77:"tok_service",82:"tok_extends",86:"(",87:")",89:"tok_oneway",90:"tok_throws",95:"tok_required",96:"tok_optional",97:"tok_void",101:"tok_string",102:"tok_binary",103:"tok_slist",104:"tok_bool",105:"tok_byte",106:"tok_i16",107:"tok_i32",108:"tok_i64",109:"tok_double",114:"tok_map",116:"<",117:">",118:"tok_set",119:"tok_list",120:"tok_cpp_type"},
productions_: [0,[3,2],[6,0],[7,0],[4,2],[4,0],[8,1],[8,3],[8,3],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[8,2],[9,2],[5,3],[5,0],[29,1],[29,1],[29,1],[31,1],[31,1],[31,1],[31,1],[31,1],[33,3],[40,1],[40,1],[40,0],[34,5],[45,2],[45,0],[47,5],[47,3],[35,5],[51,2],[51,0],[52,2],[30,6],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[56,3],[59,3],[59,0],[57,3],[61,5],[61,0],[63,1],[63,1],[36,7],[66,1],[66,0],[70,1],[70,0],[72,1],[72,0],[74,4],[74,0],[37,5],[32,8],[79,0],[81,0],[78,2],[78,0],[80,2],[80,0],[83,8],[83,7],[84,1],[88,4],[88,0],[67,2],[67,0],[91,11],[92,2],[92,0],[93,1],[93,1],[93,0],[94,2],[94,0],[85,1],[85,1],[39,1],[39,1],[39,1],[98,2],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[99,2],[110,1],[110,1],[110,1],[111,7],[112,5],[113,5],[115,2],[115,0],[68,3],[68,0],[121,2],[121,0],[122,4]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1:
      console.log("Program -> Headers DefinitionList");
    
break;
case 2:
      console.log("CaptureDocText");
    
break;
case 3:
      console.log("DestroyDocText");
    
break;
case 4:
      console.log("HeaderList -> HeaderList Header");
    
break;
case 5:
      console.log("HeaderList -> ");
    
break;
case 6:
      console.log("Header -> Include");
    
break;
case 7:
      console.log("Header -> tok_namespace tok_identifier tok_identifier");
      yy.g_program.set_namespace($$[$0-1], $$[$0]);
    
break;
case 8:
      console.log("Header -> tok_namespace * tok_identifier");
      yy.g_program.set_namespace("*", $$[$0]);
    
break;
case 9:
      console.log("Header -> tok_cpp_namespace tok_identifier");
      yy.g_program.set_namespace("cpp", $$[$0]);
    
break;
case 10:
      console.log("Header -> tok_cpp_include tok_literal");
      yy.g_program.add_cpp_include($$[$0]);
    
break;
case 11:
      console.log("Header -> tok_php_namespace tok_identifier");
      yy.g_program.set_namespace("php", $$[$0]);
    
break;
case 12:
      console.log("Header -> tok_py_module tok_identifier");
      yy.g_program.set_namespace("py", $$[$0]);
    
break;
case 13:
      console.log("Header -> tok_perl_namespace tok_identifier");
      yy.g_program.set_namespace("perl", $$[$0]);
    
break;
case 14:
      console.log("Header -> tok_ruby_namespace tok_identifier");
      yy.g_program.set_namespace("rb", $$[$0]);
    
break;
case 15:
      console.log("Header -> tok_smalltalk_category tok_st_identifier");
      yy.g_program.set_namespace("smalltalk.category", $$[$0]);
    
break;
case 16:
      console.log("Header -> tok_smalltalk_prefix tok_identifier");
      yy.g_program.set_namespace("smalltalk.prefix", $$[$0]);
    
break;
case 17:
      console.log("Header -> tok_java_package tok_identifier");
      yy.g_program.set_namespace("java", $$[$0]);
    
break;
case 18:
      console.log("Header -> tok_cocoa_prefix tok_identifier");
      yy.g_program.set_namespace("cocoa", $$[$0]);
    
break;
case 19:
      console.log("Header -> tok_xsd_namespace tok_literal");
      yy.g_program.set_namespace("xsd", $$[$0]);
    
break;
case 20:
     console.log("Header -> tok_csharp_namespace tok_identifier");
     yy.g_program.set_namespace("csharp", $$[$0]);
   
break;
case 21:
     console.log("Header -> tok_delphi_namespace tok_identifier");
     yy.g_program.set_namespace("delphi", $$[$0]);
   
break;
case 22:
      console.log("Include -> tok_include tok_literal");
      yy.g_program.add_include($$[$0]);
    
break;
case 23:
      console.log("DefinitionList -> DefinitionList Definition");
      if ($$[$0-1] !== null && $$[$0] !== null) {
      }
    
break;
case 24:
      console.log("DefinitionList -> ");
    
break;
case 25:
      console.log("Definition -> Const");
      yy.g_program.add_const($$[$0]);
      this.$ = 1;
    
break;
case 26:
      console.log("Definition -> TypeDefinition");
      yy.g_scope.add_type($$[$0].get_name(), $$[$0]);
      this.$ = $$[$0];
    
break;
case 27:
      console.log("Definition -> Service");
      yy.g_scope.add_service($$[$0].get_name(), $$[$0]);
      yy.g_program.add_service($$[$0]);
      this.$ = $$[$0];
    
break;
case 28:
      console.log("TypeDefinition -> Typedef");
      yy.g_program.add_typedef($$[$0]);
    
break;
case 29:
      console.log("TypeDefinition -> Enum");
      yy.g_program.add_enum($$[$0]);
    
break;
case 30:
      console.log("TypeDefinition -> Senum");
      yy.g_program.add_typedef($$[$0]);
    
break;
case 31:
      console.log("TypeDefinition -> Struct");
      yy.g_program.add_struct($$[$0]);
    
break;
case 32:
      console.log("TypeDefinition -> Xception");
      yy.g_program.add_xception($$[$0]);
    
break;
case 33:
      console.log("TypeDef -> tok_typedef FieldType tok_identifier");
      var td = new t_typedef(yy.g_program, $$[$0-1], $$[$0]);
      this.$ = td;
    
break;
case 37:
      console.log("Enum -> tok_enum tok_identifier { EnumDefList }");
      this.$ = $$[$0-1];
      this.$.set_name($$[$0-3]);
    
break;
case 38:
      console.log("EnumDefList -> EnumDefList EnumDef");
      this.$ = $$[$0-1];
      this.$.append($$[$0]);
    
break;
case 39:
      console.log("EnumDefList -> ");
      this.$ = new t_enum(yy.g_program);
    
break;
case 40:
      console.log("EnumDef -> tok_identifier = tok_int_constant");
      this.$ = new t_enum_value($$[$0-3], $$[$0-1]);
    
break;
case 41:
      console.log("EnumDef -> tok_identifier");
      this.$ = new t_enum_value($$[$0-1]);
    
break;
case 42:
      console.log("Senum -> tok_senum tok_identifier { SenumDefList }");
      this.$ = new t_typedef(yy.g_program, $$[$0-1], $$[$0-3]);
    
break;
case 43:
      console.log("SenumDefList -> SenumDefList SenumDef");
      this.$ = $$[$0-1];
      this.$.add_string_enum_val($$[$0]);
    
break;
case 44:
      console.log("SenumDefList -> ");
      this.$ = new t_base_type("string", t_base_type.t_base_name.TYPE_STRING);
      this.$.set_string_enum(true);
    
break;
case 45:
      console.log("SenumDef -> tok_literal");
      this.$ = 1;
    
break;
case 46:
      console.log("Const -> tok_const FieldType tok_identifier = ConstValue");
      this.$ = new yy.t_const($$[$0-4], $$[$0-3], $$[$0-1]);
    
break;
case 47:
      this.$ = new t_const_value();
      this.$.set_integer($$[$0]);
    
break;
case 48:
      this.$ = new t_const_value();
      this.$.set_double($$[$0]);
    
break;
case 49:
      console.log("ConstValue => tok_literal");
      this.$ = new t_const_value($$[$0]);
    
break;
case 50:
      console.log("ConstValue => tok_identifier");
      this.$ = new t_const_value();
      this.$.set_identifier($$[$0]);
    
break;
case 51:
      console.log("ConstValue => ConstList");
      this.$ = $$[$0];
    
break;
case 52:
      console.log("ConstValue => ConstMap");
      this.$ = $$[$0];
    
break;
case 53:
      console.log("ConstList => [ ConstListContents ]");
      this.$ = $$[$0-1];
    
break;
case 54:
      console.log("ConstListContents => ConstListContents ConstValue CommaOrSemicolonOptional");
      this.$ = $$[$0-2];
      this.$.add_list($$[$0-1]);
    
break;
case 55:
      console.log("ConstListContents =>");
      this.$ = new t_const_value();
      this.$.set_list();
    
break;
case 56:
      console.log("ConstMap => { ConstMapContents }");
      this.$ = $$[$0-1];
    
break;
case 57:
      console.log("ConstMapContents => ConstMapContents ConstValue CommaOrSemicolonOptional");
      this.$ = $$[$0-4];
      this.$.add_map($$[$0-3], $$[$0-1]);
    
break;
case 58:
      console.log("ConstMapContents =>");
      this.$ = new t_const_value();
      this.$.set_map();
    
break;
case 59:
    
break;
case 60:
    
break;
case 61:
      console.log("Struct -> tok_struct tok_identifier { FieldList }");
//      $$[$0-2].set_xsd_all($$[$0-4]);
      this.$ = $$[$0-2];
      this.$.set_name($$[$0-5]);
    
break;
case 62:
            this.$ = true;
    
break;
case 63:
            this.$ = false;
    
break;
case 64:
            this.$ = true;
    
break;
case 65:
            this.$ = false;
    
break;
case 66:
            this.$ = true;
    
break;
case 67:
            this.$ = false;
    
break;
case 68:
            this.$ = $$[$0-1];
    
break;
case 69:
            this.$ = null;
    
break;
case 70:
      console.log("Xception -> tok_xception tok_identifier { FieldList }");
      $$[$0-1].set_name($$[$0-3]);
      $$[$0-1].set_xception(true);
      this.$ = $$[$0-1];
    
break;
case 71:
      console.log("Service -> tok_service tok_identifier { FunctionList }");
      this.$ = $$[$0-2];
      this.$.set_name($$[$0-6]);
      this.$.set_extends($$[$0-5]);
    
break;
case 72:
      console.log("FlagArgs");
    
break;
case 73:
      console.log("UnflagArgs");
    
break;
case 74:
      console.log("Extends -> tok_extends tok_identifier");
    
break;
case 75:
    
break;
case 76:
      console.log("FunctionList -> FunctionList Function");
      this.$ = $$[$0-1];
      $$[$0-1].add_function($$[$0]);
    
break;
case 77:
      console.log("FunctionList -> ");
      this.$ = new t_service(yy.g_program);
    
break;
case 78:
            $$[$0-3].set_name($$[$0-5] + "_args");
            this.$ = new t_function($$[$0-6], $$[$0-5], $$[$0-3], $$[$0-1], $$[$0-7]);
    
break;
case 80:
      console.log("Oneway");
      this.$ = true;
    
break;
case 81:
      console.log("Throws -> tok_throws ( FieldList )");
    
break;
case 82:
    
break;
case 83:
      console.log("FieldList -> FieldList , Field");
      this.$ = $$[$0-1];
      this.$.append($$[$0]);
    
break;
case 84:
      console.log("FieldList -> ");
      this.$ = new t_struct(yy.g_program);
    
break;
case 85:
      console.log("tok_int_constant : Field -> FieldType tok_identifier");
      console.log("field value literal " + $$[$0-5]);
      console.log("yy.lval: "+yy.lval);
      this.$ = new t_field($$[$0-7], $$[$0-6], $$[$0-9].value);
      this.$.set_req($$[$0-8]);
    
break;
case 86:
            this.$.value = $$[$0-1];
    
break;
case 87:
            this.$.value = $$[$0];
    
break;
case 88:
    
break;
case 89:
    
break;
case 90:
    
break;
case 91:
    console.log("Field value with const value " + $$[$0]);
    this.$ = $$[$0];
    
break;
case 92:
    
break;
case 93:
      console.log("FunctionType -> FieldType");
      this.$ = $$[$0];
    
break;
case 94:
      console.log("FunctionType -> tok_void");
    
break;
case 95:
      console.log("FieldType -> tok_identifier");
    
break;
case 96:
      console.log("FieldType -> BaseType");
      this.$ = $$[$0];
    
break;
case 97:
      console.log("FieldType -> ContainerType");
      this.$ = $$[$0];
    
break;
case 98:
      console.log("BaseType -> SimpleBaseType TypeAnnotations");
      if ($$[$0] !== null) {
          this.$ = new t_base_type($$[$0-1]);
      } else {
          this.$ = $$[$0-1];
      }
    
break;
case 99:
      console.log("BaseType -> tok_string");
    
break;
case 100:
      console.log("BaseType -> tok_binary");
    
break;
case 101:
      console.log("BaseType -> tok_slist");
    
break;
case 102:
      console.log("BaseType -> tok_bool");
    
break;
case 103:
      console.log("BaseType -> tok_byte");
    
break;
case 104:
      console.log("BaseType -> tok_i16");
    
break;
case 105:
      console.log("BaseType -> tok_i32");
    
break;
case 106:
      console.log("BaseType -> tok_i64");
    
break;
case 107:
      console.log("BaseType -> tok_double");
    
break;
case 108:
      console.log("ContainerType -> SimpleContainerType TypeAnnotations");
      this.$ = $$[$0-1];
    
break;
case 109:
      console.log("SimpleContainerType -> MapType");
      this.$ = $$[$0];
    
break;
case 110:
      console.log("SimpleContainerType -> SetType");
    
break;
case 111:
      console.log("SimpleContainerType -> ListType");
      this.$ = $$[$0];
    
break;
case 112:
      console.log("MapType -> tok_map <FieldType, FieldType>");
      this.$ = new t_map($$[$0-3], $$[$0-1]);
    
break;
case 113:
      console.log("SetType -> tok_set<FieldType>");
    
break;
case 114:
      console.log("ListType -> tok_list<FieldType>");
      this.$ = new t_list($$[$0-2]);
    
break;
case 115:
            this.$ = $$[$0];
    
break;
case 116:
            this.$ = null;
    
break;
case 117:
      console.log("TypeAnnotations -> ( TypeAnnotationList )");
    
break;
case 118:
    
break;
case 119:
      console.log("TypeAnnotationList -> TypeAnnotationList , TypeAnnotation");
    
break;
case 120:
    
break;
case 121:
      console.log("TypeAnnotation -> tok_identifier = tok_literal");
    
break;
}
},
table: [{1:[2,5],3:1,4:2,10:[2,5],13:[2,5],14:[2,5],16:[2,5],17:[2,5],18:[2,5],19:[2,5],20:[2,5],22:[2,5],23:[2,5],24:[2,5],25:[2,5],26:[2,5],27:[2,5],28:[2,5],38:[2,5],43:[2,5],50:[2,5],53:[2,5],64:[2,5],65:[2,5],76:[2,5],77:[2,5]},{1:[3]},{1:[2,24],5:3,8:4,9:5,10:[1,6],13:[1,7],14:[1,8],16:[1,9],17:[1,10],18:[1,11],19:[1,12],20:[1,13],22:[1,14],23:[1,15],24:[1,16],25:[1,17],26:[1,18],27:[1,19],28:[1,20],38:[2,24],43:[2,24],50:[2,24],53:[2,24],64:[2,24],65:[2,24],76:[2,24],77:[2,24]},{1:[2,1],6:21,38:[2,2],43:[2,2],50:[2,2],53:[2,2],64:[2,2],65:[2,2],76:[2,2],77:[2,2]},{1:[2,4],10:[2,4],13:[2,4],14:[2,4],16:[2,4],17:[2,4],18:[2,4],19:[2,4],20:[2,4],22:[2,4],23:[2,4],24:[2,4],25:[2,4],26:[2,4],27:[2,4],28:[2,4],38:[2,4],43:[2,4],50:[2,4],53:[2,4],64:[2,4],65:[2,4],76:[2,4],77:[2,4]},{1:[2,6],10:[2,6],13:[2,6],14:[2,6],16:[2,6],17:[2,6],18:[2,6],19:[2,6],20:[2,6],22:[2,6],23:[2,6],24:[2,6],25:[2,6],26:[2,6],27:[2,6],28:[2,6],38:[2,6],43:[2,6],50:[2,6],53:[2,6],64:[2,6],65:[2,6],76:[2,6],77:[2,6]},{11:[1,22],12:[1,23]},{11:[1,24]},{15:[1,25]},{11:[1,26]},{11:[1,27]},{11:[1,28]},{11:[1,29]},{21:[1,30]},{11:[1,31]},{11:[1,32]},{11:[1,33]},{15:[1,34]},{11:[1,35]},{11:[1,36]},{15:[1,37]},{29:38,30:39,31:40,32:41,33:43,34:44,35:45,36:46,37:47,38:[1,49],43:[1,50],50:[1,51],53:[1,42],63:52,64:[1,54],65:[1,55],76:[1,53],77:[1,48]},{11:[1,56]},{11:[1,57]},{1:[2,9],10:[2,9],13:[2,9],14:[2,9],16:[2,9],17:[2,9],18:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[2,9],27:[2,9],28:[2,9],38:[2,9],43:[2,9],50:[2,9],53:[2,9],64:[2,9],65:[2,9],76:[2,9],77:[2,9]},{1:[2,10],10:[2,10],13:[2,10],14:[2,10],16:[2,10],17:[2,10],18:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],24:[2,10],25:[2,10],26:[2,10],27:[2,10],28:[2,10],38:[2,10],43:[2,10],50:[2,10],53:[2,10],64:[2,10],65:[2,10],76:[2,10],77:[2,10]},{1:[2,11],10:[2,11],13:[2,11],14:[2,11],16:[2,11],17:[2,11],18:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],24:[2,11],25:[2,11],26:[2,11],27:[2,11],28:[2,11],38:[2,11],43:[2,11],50:[2,11],53:[2,11],64:[2,11],65:[2,11],76:[2,11],77:[2,11]},{1:[2,12],10:[2,12],13:[2,12],14:[2,12],16:[2,12],17:[2,12],18:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],24:[2,12],25:[2,12],26:[2,12],27:[2,12],28:[2,12],38:[2,12],43:[2,12],50:[2,12],53:[2,12],64:[2,12],65:[2,12],76:[2,12],77:[2,12]},{1:[2,13],10:[2,13],13:[2,13],14:[2,13],16:[2,13],17:[2,13],18:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],27:[2,13],28:[2,13],38:[2,13],43:[2,13],50:[2,13],53:[2,13],64:[2,13],65:[2,13],76:[2,13],77:[2,13]},{1:[2,14],10:[2,14],13:[2,14],14:[2,14],16:[2,14],17:[2,14],18:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],24:[2,14],25:[2,14],26:[2,14],27:[2,14],28:[2,14],38:[2,14],43:[2,14],50:[2,14],53:[2,14],64:[2,14],65:[2,14],76:[2,14],77:[2,14]},{1:[2,15],10:[2,15],13:[2,15],14:[2,15],16:[2,15],17:[2,15],18:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],27:[2,15],28:[2,15],38:[2,15],43:[2,15],50:[2,15],53:[2,15],64:[2,15],65:[2,15],76:[2,15],77:[2,15]},{1:[2,16],10:[2,16],13:[2,16],14:[2,16],16:[2,16],17:[2,16],18:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],24:[2,16],25:[2,16],26:[2,16],27:[2,16],28:[2,16],38:[2,16],43:[2,16],50:[2,16],53:[2,16],64:[2,16],65:[2,16],76:[2,16],77:[2,16]},{1:[2,17],10:[2,17],13:[2,17],14:[2,17],16:[2,17],17:[2,17],18:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],24:[2,17],25:[2,17],26:[2,17],27:[2,17],28:[2,17],38:[2,17],43:[2,17],50:[2,17],53:[2,17],64:[2,17],65:[2,17],76:[2,17],77:[2,17]},{1:[2,18],10:[2,18],13:[2,18],14:[2,18],16:[2,18],17:[2,18],18:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],24:[2,18],25:[2,18],26:[2,18],27:[2,18],28:[2,18],38:[2,18],43:[2,18],50:[2,18],53:[2,18],64:[2,18],65:[2,18],76:[2,18],77:[2,18]},{1:[2,19],10:[2,19],13:[2,19],14:[2,19],16:[2,19],17:[2,19],18:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],24:[2,19],25:[2,19],26:[2,19],27:[2,19],28:[2,19],38:[2,19],43:[2,19],50:[2,19],53:[2,19],64:[2,19],65:[2,19],76:[2,19],77:[2,19]},{1:[2,20],10:[2,20],13:[2,20],14:[2,20],16:[2,20],17:[2,20],18:[2,20],19:[2,20],20:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[2,20],27:[2,20],28:[2,20],38:[2,20],43:[2,20],50:[2,20],53:[2,20],64:[2,20],65:[2,20],76:[2,20],77:[2,20]},{1:[2,21],10:[2,21],13:[2,21],14:[2,21],16:[2,21],17:[2,21],18:[2,21],19:[2,21],20:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],26:[2,21],27:[2,21],28:[2,21],38:[2,21],43:[2,21],50:[2,21],53:[2,21],64:[2,21],65:[2,21],76:[2,21],77:[2,21]},{1:[2,22],10:[2,22],13:[2,22],14:[2,22],16:[2,22],17:[2,22],18:[2,22],19:[2,22],20:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[2,22],27:[2,22],28:[2,22],38:[2,22],43:[2,22],50:[2,22],53:[2,22],64:[2,22],65:[2,22],76:[2,22],77:[2,22]},{1:[2,23],38:[2,23],43:[2,23],50:[2,23],53:[2,23],64:[2,23],65:[2,23],76:[2,23],77:[2,23]},{1:[2,25],38:[2,25],43:[2,25],50:[2,25],53:[2,25],64:[2,25],65:[2,25],76:[2,25],77:[2,25]},{1:[2,26],38:[2,26],43:[2,26],50:[2,26],53:[2,26],64:[2,26],65:[2,26],76:[2,26],77:[2,26]},{1:[2,27],38:[2,27],43:[2,27],50:[2,27],53:[2,27],64:[2,27],65:[2,27],76:[2,27],77:[2,27]},{11:[1,59],39:58,98:60,99:61,100:62,101:[1,64],102:[1,65],103:[1,66],104:[1,67],105:[1,68],106:[1,69],107:[1,70],108:[1,71],109:[1,72],110:63,111:73,112:74,113:75,114:[1,76],118:[1,77],119:[1,78]},{1:[2,28],38:[2,28],43:[2,28],50:[2,28],53:[2,28],64:[2,28],65:[2,28],76:[2,28],77:[2,28]},{1:[2,29],38:[2,29],43:[2,29],50:[2,29],53:[2,29],64:[2,29],65:[2,29],76:[2,29],77:[2,29]},{1:[2,30],38:[2,30],43:[2,30],50:[2,30],53:[2,30],64:[2,30],65:[2,30],76:[2,30],77:[2,30]},{1:[2,31],38:[2,31],43:[2,31],50:[2,31],53:[2,31],64:[2,31],65:[2,31],76:[2,31],77:[2,31]},{1:[2,32],38:[2,32],43:[2,32],50:[2,32],53:[2,32],64:[2,32],65:[2,32],76:[2,32],77:[2,32]},{11:[1,79]},{11:[1,59],39:80,98:60,99:61,100:62,101:[1,64],102:[1,65],103:[1,66],104:[1,67],105:[1,68],106:[1,69],107:[1,70],108:[1,71],109:[1,72],110:63,111:73,112:74,113:75,114:[1,76],118:[1,77],119:[1,78]},{11:[1,81]},{11:[1,82]},{11:[1,83]},{11:[1,84]},{11:[2,59]},{11:[2,60]},{1:[2,7],10:[2,7],13:[2,7],14:[2,7],16:[2,7],17:[2,7],18:[2,7],19:[2,7],20:[2,7],22:[2,7],23:[2,7],24:[2,7],25:[2,7],26:[2,7],27:[2,7],28:[2,7],38:[2,7],43:[2,7],50:[2,7],53:[2,7],64:[2,7],65:[2,7],76:[2,7],77:[2,7]},{1:[2,8],10:[2,8],13:[2,8],14:[2,8],16:[2,8],17:[2,8],18:[2,8],19:[2,8],20:[2,8],22:[2,8],23:[2,8],24:[2,8],25:[2,8],26:[2,8],27:[2,8],28:[2,8],38:[2,8],43:[2,8],50:[2,8],53:[2,8],64:[2,8],65:[2,8],76:[2,8],77:[2,8]},{11:[1,85]},{11:[2,95],41:[2,95],117:[2,95]},{11:[2,96],41:[2,96],117:[2,96]},{11:[2,97],41:[2,97],117:[2,97]},{11:[2,118],41:[2,118],68:86,86:[1,87],117:[2,118]},{11:[2,118],41:[2,118],68:88,86:[1,87],117:[2,118]},{11:[2,99],41:[2,99],86:[2,99],117:[2,99]},{11:[2,100],41:[2,100],86:[2,100],117:[2,100]},{11:[2,101],41:[2,101],86:[2,101],117:[2,101]},{11:[2,102],41:[2,102],86:[2,102],117:[2,102]},{11:[2,103],41:[2,103],86:[2,103],117:[2,103]},{11:[2,104],41:[2,104],86:[2,104],117:[2,104]},{11:[2,105],41:[2,105],86:[2,105],117:[2,105]},{11:[2,106],41:[2,106],86:[2,106],117:[2,106]},{11:[2,107],41:[2,107],86:[2,107],117:[2,107]},{11:[2,109],41:[2,109],86:[2,109],117:[2,109]},{11:[2,110],41:[2,110],86:[2,110],117:[2,110]},{11:[2,111],41:[2,111],86:[2,111],117:[2,111]},{115:89,116:[2,116],120:[1,90]},{115:91,116:[2,116],120:[1,90]},{116:[1,92]},{44:[2,75],78:93,82:[1,94]},{11:[1,95]},{44:[1,96]},{44:[1,97]},{44:[2,63],66:98,69:[1,99]},{44:[1,100]},{48:[1,101]},{11:[2,98],41:[2,98],117:[2,98]},{11:[2,120],87:[2,120],121:102},{11:[2,108],41:[2,108],117:[2,108]},{116:[1,103]},{15:[1,104]},{116:[1,105]},{11:[1,59],39:106,98:60,99:61,100:62,101:[1,64],102:[1,65],103:[1,66],104:[1,67],105:[1,68],106:[1,69],107:[1,70],108:[1,71],109:[1,72],110:63,111:73,112:74,113:75,114:[1,76],118:[1,77],119:[1,78]},{44:[1,107]},{11:[1,108]},{1:[2,33],38:[2,33],43:[2,33],50:[2,33],53:[2,33],64:[2,33],65:[2,33],76:[2,33],77:[2,33]},{11:[2,39],45:109,46:[2,39]},{15:[2,44],46:[2,44],51:110},{44:[1,111]},{44:[2,62]},{11:[2,84],46:[2,84],49:[2,84],67:112,95:[2,84],96:[2,84],101:[2,84],102:[2,84],103:[2,84],104:[2,84],105:[2,84],106:[2,84],107:[2,84],108:[2,84],109:[2,84],114:[2,84],118:[2,84],119:[2,84]},{11:[1,117],15:[1,116],44:[1,121],49:[1,114],54:113,55:[1,115],56:118,57:119,58:[1,120]},{11:[1,124],87:[1,122],122:123},{11:[1,59],39:125,98:60,99:61,100:62,101:[1,64],102:[1,65],103:[1,66],104:[1,67],105:[1,68],106:[1,69],107:[1,70],108:[1,71],109:[1,72],110:63,111:73,112:74,113:75,114:[1,76],118:[1,77],119:[1,78]},{11:[2,115],41:[2,115],86:[2,115],116:[2,115],117:[2,115]},{11:[1,59],39:126,98:60,99:61,100:62,101:[1,64],102:[1,65],103:[1,66],104:[1,67],105:[1,68],106:[1,69],107:[1,70],108:[1,71],109:[1,72],110:63,111:73,112:74,113:75,114:[1,76],118:[1,77],119:[1,78]},{117:[1,127]},{11:[2,72],46:[2,72],79:128,89:[2,72],97:[2,72],101:[2,72],102:[2,72],103:[2,72],104:[2,72],105:[2,72],106:[2,72],107:[2,72],108:[2,72],109:[2,72],114:[2,72],118:[2,72],119:[2,72]},{44:[2,74]},{6:131,11:[2,2],46:[1,129],47:130},{15:[1,134],46:[1,132],52:133},{11:[2,84],46:[2,84],49:[2,84],67:135,95:[2,84],96:[2,84],101:[2,84],102:[2,84],103:[2,84],104:[2,84],105:[2,84],106:[2,84],107:[2,84],108:[2,84],109:[2,84],114:[2,84],118:[2,84],119:[2,84]},{6:138,11:[2,2],46:[1,136],49:[2,2],91:137,95:[2,2],96:[2,2],101:[2,2],102:[2,2],103:[2,2],104:[2,2],105:[2,2],106:[2,2],107:[2,2],108:[2,2],109:[2,2],114:[2,2],118:[2,2],119:[2,2]},{1:[2,36],38:[2,36],40:139,41:[1,140],42:[1,141],43:[2,36],50:[2,36],53:[2,36],64:[2,36],65:[2,36],76:[2,36],77:[2,36]},{1:[2,47],11:[2,47],15:[2,47],38:[2,47],41:[2,47],42:[2,47],43:[2,47],44:[2,47],46:[2,47],49:[2,47],50:[2,47],53:[2,47],55:[2,47],58:[2,47],60:[2,47],62:[2,47],64:[2,47],65:[2,47],71:[2,47],73:[2,47],75:[2,47],76:[2,47],77:[2,47],86:[2,47],87:[2,47],95:[2,47],96:[2,47],101:[2,47],102:[2,47],103:[2,47],104:[2,47],105:[2,47],106:[2,47],107:[2,47],108:[2,47],109:[2,47],114:[2,47],118:[2,47],119:[2,47]},{1:[2,48],11:[2,48],15:[2,48],38:[2,48],41:[2,48],42:[2,48],43:[2,48],44:[2,48],46:[2,48],49:[2,48],50:[2,48],53:[2,48],55:[2,48],58:[2,48],60:[2,48],62:[2,48],64:[2,48],65:[2,48],71:[2,48],73:[2,48],75:[2,48],76:[2,48],77:[2,48],86:[2,48],87:[2,48],95:[2,48],96:[2,48],101:[2,48],102:[2,48],103:[2,48],104:[2,48],105:[2,48],106:[2,48],107:[2,48],108:[2,48],109:[2,48],114:[2,48],118:[2,48],119:[2,48]},{1:[2,49],11:[2,49],15:[2,49],38:[2,49],41:[2,49],42:[2,49],43:[2,49],44:[2,49],46:[2,49],49:[2,49],50:[2,49],53:[2,49],55:[2,49],58:[2,49],60:[2,49],62:[2,49],64:[2,49],65:[2,49],71:[2,49],73:[2,49],75:[2,49],76:[2,49],77:[2,49],86:[2,49],87:[2,49],95:[2,49],96:[2,49],101:[2,49],102:[2,49],103:[2,49],104:[2,49],105:[2,49],106:[2,49],107:[2,49],108:[2,49],109:[2,49],114:[2,49],118:[2,49],119:[2,49]},{1:[2,50],11:[2,50],15:[2,50],38:[2,50],41:[2,50],42:[2,50],43:[2,50],44:[2,50],46:[2,50],49:[2,50],50:[2,50],53:[2,50],55:[2,50],58:[2,50],60:[2,50],62:[2,50],64:[2,50],65:[2,50],71:[2,50],73:[2,50],75:[2,50],76:[2,50],77:[2,50],86:[2,50],87:[2,50],95:[2,50],96:[2,50],101:[2,50],102:[2,50],103:[2,50],104:[2,50],105:[2,50],106:[2,50],107:[2,50],108:[2,50],109:[2,50],114:[2,50],118:[2,50],119:[2,50]},{1:[2,51],11:[2,51],15:[2,51],38:[2,51],41:[2,51],42:[2,51],43:[2,51],44:[2,51],46:[2,51],49:[2,51],50:[2,51],53:[2,51],55:[2,51],58:[2,51],60:[2,51],62:[2,51],64:[2,51],65:[2,51],71:[2,51],73:[2,51],75:[2,51],76:[2,51],77:[2,51],86:[2,51],87:[2,51],95:[2,51],96:[2,51],101:[2,51],102:[2,51],103:[2,51],104:[2,51],105:[2,51],106:[2,51],107:[2,51],108:[2,51],109:[2,51],114:[2,51],118:[2,51],119:[2,51]},{1:[2,52],11:[2,52],15:[2,52],38:[2,52],41:[2,52],42:[2,52],43:[2,52],44:[2,52],46:[2,52],49:[2,52],50:[2,52],53:[2,52],55:[2,52],58:[2,52],60:[2,52],62:[2,52],64:[2,52],65:[2,52],71:[2,52],73:[2,52],75:[2,52],76:[2,52],77:[2,52],86:[2,52],87:[2,52],95:[2,52],96:[2,52],101:[2,52],102:[2,52],103:[2,52],104:[2,52],105:[2,52],106:[2,52],107:[2,52],108:[2,52],109:[2,52],114:[2,52],118:[2,52],119:[2,52]},{11:[2,55],15:[2,55],44:[2,55],49:[2,55],55:[2,55],58:[2,55],59:142,60:[2,55]},{11:[2,58],15:[2,58],44:[2,58],46:[2,58],49:[2,58],55:[2,58],58:[2,58],61:143},{1:[2,117],11:[2,117],38:[2,117],41:[2,117],42:[2,117],43:[2,117],46:[2,117],49:[2,117],50:[2,117],53:[2,117],64:[2,117],65:[2,117],76:[2,117],77:[2,117],87:[2,117],95:[2,117],96:[2,117],101:[2,117],102:[2,117],103:[2,117],104:[2,117],105:[2,117],106:[2,117],107:[2,117],108:[2,117],109:[2,117],114:[2,117],117:[2,117],118:[2,117],119:[2,117]},{11:[2,119],87:[2,119]},{48:[1,144]},{41:[1,145]},{117:[1,146]},{11:[2,116],41:[2,116],86:[2,116],115:147,117:[2,116],120:[1,90]},{11:[2,77],46:[2,77],80:148,89:[2,77],97:[2,77],101:[2,77],102:[2,77],103:[2,77],104:[2,77],105:[2,77],106:[2,77],107:[2,77],108:[2,77],109:[2,77],114:[2,77],118:[2,77],119:[2,77]},{1:[2,37],38:[2,37],43:[2,37],50:[2,37],53:[2,37],64:[2,37],65:[2,37],76:[2,37],77:[2,37]},{11:[2,38],46:[2,38]},{11:[1,149]},{1:[2,42],38:[2,42],43:[2,42],50:[2,42],53:[2,42],64:[2,42],65:[2,42],76:[2,42],77:[2,42]},{15:[2,43],46:[2,43]},{15:[2,36],40:150,41:[1,140],42:[1,141],46:[2,36]},{6:138,11:[2,2],46:[1,151],49:[2,2],91:137,95:[2,2],96:[2,2],101:[2,2],102:[2,2],103:[2,2],104:[2,2],105:[2,2],106:[2,2],107:[2,2],108:[2,2],109:[2,2],114:[2,2],118:[2,2],119:[2,2]},{1:[2,70],38:[2,70],43:[2,70],50:[2,70],53:[2,70],64:[2,70],65:[2,70],76:[2,70],77:[2,70]},{11:[2,83],46:[2,83],49:[2,83],87:[2,83],95:[2,83],96:[2,83],101:[2,83],102:[2,83],103:[2,83],104:[2,83],105:[2,83],106:[2,83],107:[2,83],108:[2,83],109:[2,83],114:[2,83],118:[2,83],119:[2,83]},{11:[2,87],49:[1,153],92:152,95:[2,87],96:[2,87],101:[2,87],102:[2,87],103:[2,87],104:[2,87],105:[2,87],106:[2,87],107:[2,87],108:[2,87],109:[2,87],114:[2,87],118:[2,87],119:[2,87]},{1:[2,46],38:[2,46],43:[2,46],50:[2,46],53:[2,46],64:[2,46],65:[2,46],76:[2,46],77:[2,46]},{1:[2,34],11:[2,34],15:[2,34],38:[2,34],43:[2,34],44:[2,34],46:[2,34],49:[2,34],50:[2,34],53:[2,34],55:[2,34],58:[2,34],60:[2,34],64:[2,34],65:[2,34],76:[2,34],77:[2,34],87:[2,34],89:[2,34],95:[2,34],96:[2,34],97:[2,34],101:[2,34],102:[2,34],103:[2,34],104:[2,34],105:[2,34],106:[2,34],107:[2,34],108:[2,34],109:[2,34],114:[2,34],118:[2,34],119:[2,34]},{1:[2,35],11:[2,35],15:[2,35],38:[2,35],43:[2,35],44:[2,35],46:[2,35],49:[2,35],50:[2,35],53:[2,35],55:[2,35],58:[2,35],60:[2,35],64:[2,35],65:[2,35],76:[2,35],77:[2,35],87:[2,35],89:[2,35],95:[2,35],96:[2,35],97:[2,35],101:[2,35],102:[2,35],103:[2,35],104:[2,35],105:[2,35],106:[2,35],107:[2,35],108:[2,35],109:[2,35],114:[2,35],118:[2,35],119:[2,35]},{11:[1,117],15:[1,116],44:[1,121],49:[1,114],54:155,55:[1,115],56:118,57:119,58:[1,120],60:[1,154]},{11:[1,117],15:[1,116],44:[1,121],46:[1,156],49:[1,114],54:157,55:[1,115],56:118,57:119,58:[1,120]},{15:[1,158]},{11:[1,59],39:159,98:60,99:61,100:62,101:[1,64],102:[1,65],103:[1,66],104:[1,67],105:[1,68],106:[1,69],107:[1,70],108:[1,71],109:[1,72],110:63,111:73,112:74,113:75,114:[1,76],118:[1,77],119:[1,78]},{11:[2,113],41:[2,113],86:[2,113],117:[2,113]},{11:[2,114],41:[2,114],86:[2,114],117:[2,114]},{11:[1,59],39:165,46:[2,73],81:160,83:161,84:162,85:163,89:[1,164],97:[1,166],98:60,99:61,100:62,101:[1,64],102:[1,65],103:[1,66],104:[1,67],105:[1,68],106:[1,69],107:[1,70],108:[1,71],109:[1,72],110:63,111:73,112:74,113:75,114:[1,76],118:[1,77],119:[1,78]},{11:[2,36],40:168,41:[1,140],42:[1,141],46:[2,36],48:[1,167]},{15:[2,45],46:[2,45]},{1:[2,118],38:[2,118],43:[2,118],50:[2,118],53:[2,118],64:[2,118],65:[2,118],68:169,76:[2,118],77:[2,118],86:[1,87]},{11:[2,90],93:170,95:[1,171],96:[1,172],101:[2,90],102:[2,90],103:[2,90],104:[2,90],105:[2,90],106:[2,90],107:[2,90],108:[2,90],109:[2,90],114:[2,90],118:[2,90],119:[2,90]},{62:[1,173]},{1:[2,53],11:[2,53],15:[2,53],38:[2,53],41:[2,53],42:[2,53],43:[2,53],44:[2,53],46:[2,53],49:[2,53],50:[2,53],53:[2,53],55:[2,53],58:[2,53],60:[2,53],62:[2,53],64:[2,53],65:[2,53],71:[2,53],73:[2,53],75:[2,53],76:[2,53],77:[2,53],86:[2,53],87:[2,53],95:[2,53],96:[2,53],101:[2,53],102:[2,53],103:[2,53],104:[2,53],105:[2,53],106:[2,53],107:[2,53],108:[2,53],109:[2,53],114:[2,53],118:[2,53],119:[2,53]},{11:[2,36],15:[2,36],40:174,41:[1,140],42:[1,141],44:[2,36],49:[2,36],55:[2,36],58:[2,36],60:[2,36]},{1:[2,56],11:[2,56],15:[2,56],38:[2,56],41:[2,56],42:[2,56],43:[2,56],44:[2,56],46:[2,56],49:[2,56],50:[2,56],53:[2,56],55:[2,56],58:[2,56],60:[2,56],62:[2,56],64:[2,56],65:[2,56],71:[2,56],73:[2,56],75:[2,56],76:[2,56],77:[2,56],86:[2,56],87:[2,56],95:[2,56],96:[2,56],101:[2,56],102:[2,56],103:[2,56],104:[2,56],105:[2,56],106:[2,56],107:[2,56],108:[2,56],109:[2,56],114:[2,56],118:[2,56],119:[2,56]},{62:[1,175]},{11:[2,36],40:176,41:[1,140],42:[1,141],87:[2,36]},{117:[1,177]},{46:[1,178]},{11:[2,76],46:[2,76],89:[2,76],97:[2,76],101:[2,76],102:[2,76],103:[2,76],104:[2,76],105:[2,76],106:[2,76],107:[2,76],108:[2,76],109:[2,76],114:[2,76],118:[2,76],119:[2,76]},{11:[1,59],39:165,85:179,97:[1,166],98:60,99:61,100:62,101:[1,64],102:[1,65],103:[1,66],104:[1,67],105:[1,68],106:[1,69],107:[1,70],108:[1,71],109:[1,72],110:63,111:73,112:74,113:75,114:[1,76],118:[1,77],119:[1,78]},{11:[1,180]},{11:[2,80],97:[2,80],101:[2,80],102:[2,80],103:[2,80],104:[2,80],105:[2,80],106:[2,80],107:[2,80],108:[2,80],109:[2,80],114:[2,80],118:[2,80],119:[2,80]},{11:[2,93]},{11:[2,94]},{49:[1,181]},{11:[2,41],46:[2,41]},{1:[2,61],38:[2,61],43:[2,61],50:[2,61],53:[2,61],64:[2,61],65:[2,61],76:[2,61],77:[2,61]},{11:[1,59],39:182,98:60,99:61,100:62,101:[1,64],102:[1,65],103:[1,66],104:[1,67],105:[1,68],106:[1,69],107:[1,70],108:[1,71],109:[1,72],110:63,111:73,112:74,113:75,114:[1,76],118:[1,77],119:[1,78]},{11:[2,88],101:[2,88],102:[2,88],103:[2,88],104:[2,88],105:[2,88],106:[2,88],107:[2,88],108:[2,88],109:[2,88],114:[2,88],118:[2,88],119:[2,88]},{11:[2,89],101:[2,89],102:[2,89],103:[2,89],104:[2,89],105:[2,89],106:[2,89],107:[2,89],108:[2,89],109:[2,89],114:[2,89],118:[2,89],119:[2,89]},{11:[2,86],95:[2,86],96:[2,86],101:[2,86],102:[2,86],103:[2,86],104:[2,86],105:[2,86],106:[2,86],107:[2,86],108:[2,86],109:[2,86],114:[2,86],118:[2,86],119:[2,86]},{11:[2,54],15:[2,54],44:[2,54],49:[2,54],55:[2,54],58:[2,54],60:[2,54]},{11:[1,117],15:[1,116],44:[1,121],49:[1,114],54:183,55:[1,115],56:118,57:119,58:[1,120]},{11:[2,121],87:[2,121]},{11:[2,112],41:[2,112],86:[2,112],117:[2,112]},{1:[2,71],38:[2,71],43:[2,71],50:[2,71],53:[2,71],64:[2,71],65:[2,71],76:[2,71],77:[2,71]},{11:[1,184]},{86:[1,185]},{11:[2,36],40:186,41:[1,140],42:[1,141],46:[2,36]},{11:[1,187]},{11:[2,36],15:[2,36],40:188,41:[1,140],42:[1,141],44:[2,36],46:[2,36],49:[2,36],55:[2,36],58:[2,36]},{86:[1,189]},{11:[2,84],49:[2,84],67:190,87:[2,84],95:[2,84],96:[2,84],101:[2,84],102:[2,84],103:[2,84],104:[2,84],105:[2,84],106:[2,84],107:[2,84],108:[2,84],109:[2,84],114:[2,84],118:[2,84],119:[2,84]},{11:[2,40],46:[2,40]},{11:[2,92],41:[2,92],42:[2,92],46:[2,92],48:[1,192],49:[2,92],71:[2,92],73:[2,92],75:[2,92],86:[2,92],87:[2,92],94:191,95:[2,92],96:[2,92],101:[2,92],102:[2,92],103:[2,92],104:[2,92],105:[2,92],106:[2,92],107:[2,92],108:[2,92],109:[2,92],114:[2,92],118:[2,92],119:[2,92]},{11:[2,57],15:[2,57],44:[2,57],46:[2,57],49:[2,57],55:[2,57],58:[2,57]},{11:[2,84],49:[2,84],67:193,87:[2,84],95:[2,84],96:[2,84],101:[2,84],102:[2,84],103:[2,84],104:[2,84],105:[2,84],106:[2,84],107:[2,84],108:[2,84],109:[2,84],114:[2,84],118:[2,84],119:[2,84]},{6:138,11:[2,2],49:[2,2],87:[1,194],91:137,95:[2,2],96:[2,2],101:[2,2],102:[2,2],103:[2,2],104:[2,2],105:[2,2],106:[2,2],107:[2,2],108:[2,2],109:[2,2],114:[2,2],118:[2,2],119:[2,2]},{11:[2,65],41:[2,65],42:[2,65],46:[2,65],49:[2,65],70:195,71:[1,196],73:[2,65],75:[2,65],86:[2,65],87:[2,65],95:[2,65],96:[2,65],101:[2,65],102:[2,65],103:[2,65],104:[2,65],105:[2,65],106:[2,65],107:[2,65],108:[2,65],109:[2,65],114:[2,65],118:[2,65],119:[2,65]},{11:[1,117],15:[1,116],44:[1,121],49:[1,114],54:197,55:[1,115],56:118,57:119,58:[1,120]},{6:138,11:[2,2],49:[2,2],87:[1,198],91:137,95:[2,2],96:[2,2],101:[2,2],102:[2,2],103:[2,2],104:[2,2],105:[2,2],106:[2,2],107:[2,2],108:[2,2],109:[2,2],114:[2,2],118:[2,2],119:[2,2]},{11:[2,82],41:[2,82],42:[2,82],46:[2,82],88:199,89:[2,82],90:[1,200],97:[2,82],101:[2,82],102:[2,82],103:[2,82],104:[2,82],105:[2,82],106:[2,82],107:[2,82],108:[2,82],109:[2,82],114:[2,82],118:[2,82],119:[2,82]},{11:[2,67],41:[2,67],42:[2,67],46:[2,67],49:[2,67],72:201,73:[1,202],75:[2,67],86:[2,67],87:[2,67],95:[2,67],96:[2,67],101:[2,67],102:[2,67],103:[2,67],104:[2,67],105:[2,67],106:[2,67],107:[2,67],108:[2,67],109:[2,67],114:[2,67],118:[2,67],119:[2,67]},{11:[2,64],41:[2,64],42:[2,64],46:[2,64],49:[2,64],73:[2,64],75:[2,64],86:[2,64],87:[2,64],95:[2,64],96:[2,64],101:[2,64],102:[2,64],103:[2,64],104:[2,64],105:[2,64],106:[2,64],107:[2,64],108:[2,64],109:[2,64],114:[2,64],118:[2,64],119:[2,64]},{11:[2,91],41:[2,91],42:[2,91],46:[2,91],49:[2,91],71:[2,91],73:[2,91],75:[2,91],86:[2,91],87:[2,91],95:[2,91],96:[2,91],101:[2,91],102:[2,91],103:[2,91],104:[2,91],105:[2,91],106:[2,91],107:[2,91],108:[2,91],109:[2,91],114:[2,91],118:[2,91],119:[2,91]},{11:[2,82],41:[2,82],42:[2,82],46:[2,82],88:203,89:[2,82],90:[1,200],97:[2,82],101:[2,82],102:[2,82],103:[2,82],104:[2,82],105:[2,82],106:[2,82],107:[2,82],108:[2,82],109:[2,82],114:[2,82],118:[2,82],119:[2,82]},{11:[2,36],40:204,41:[1,140],42:[1,141],46:[2,36],89:[2,36],97:[2,36],101:[2,36],102:[2,36],103:[2,36],104:[2,36],105:[2,36],106:[2,36],107:[2,36],108:[2,36],109:[2,36],114:[2,36],118:[2,36],119:[2,36]},{86:[1,205]},{11:[2,69],41:[2,69],42:[2,69],46:[2,69],49:[2,69],74:206,75:[1,207],86:[2,69],87:[2,69],95:[2,69],96:[2,69],101:[2,69],102:[2,69],103:[2,69],104:[2,69],105:[2,69],106:[2,69],107:[2,69],108:[2,69],109:[2,69],114:[2,69],118:[2,69],119:[2,69]},{11:[2,66],41:[2,66],42:[2,66],46:[2,66],49:[2,66],75:[2,66],86:[2,66],87:[2,66],95:[2,66],96:[2,66],101:[2,66],102:[2,66],103:[2,66],104:[2,66],105:[2,66],106:[2,66],107:[2,66],108:[2,66],109:[2,66],114:[2,66],118:[2,66],119:[2,66]},{11:[2,36],40:208,41:[1,140],42:[1,141],46:[2,36],89:[2,36],97:[2,36],101:[2,36],102:[2,36],103:[2,36],104:[2,36],105:[2,36],106:[2,36],107:[2,36],108:[2,36],109:[2,36],114:[2,36],118:[2,36],119:[2,36]},{11:[2,79],46:[2,79],89:[2,79],97:[2,79],101:[2,79],102:[2,79],103:[2,79],104:[2,79],105:[2,79],106:[2,79],107:[2,79],108:[2,79],109:[2,79],114:[2,79],118:[2,79],119:[2,79]},{11:[2,84],49:[2,84],67:209,87:[2,84],95:[2,84],96:[2,84],101:[2,84],102:[2,84],103:[2,84],104:[2,84],105:[2,84],106:[2,84],107:[2,84],108:[2,84],109:[2,84],114:[2,84],118:[2,84],119:[2,84]},{11:[2,118],41:[2,118],42:[2,118],46:[2,118],49:[2,118],68:210,86:[1,87],87:[2,118],95:[2,118],96:[2,118],101:[2,118],102:[2,118],103:[2,118],104:[2,118],105:[2,118],106:[2,118],107:[2,118],108:[2,118],109:[2,118],114:[2,118],118:[2,118],119:[2,118]},{44:[1,211]},{11:[2,78],46:[2,78],89:[2,78],97:[2,78],101:[2,78],102:[2,78],103:[2,78],104:[2,78],105:[2,78],106:[2,78],107:[2,78],108:[2,78],109:[2,78],114:[2,78],118:[2,78],119:[2,78]},{6:138,11:[2,2],49:[2,2],87:[1,212],91:137,95:[2,2],96:[2,2],101:[2,2],102:[2,2],103:[2,2],104:[2,2],105:[2,2],106:[2,2],107:[2,2],108:[2,2],109:[2,2],114:[2,2],118:[2,2],119:[2,2]},{11:[2,36],40:213,41:[1,140],42:[1,141],46:[2,36],49:[2,36],87:[2,36],95:[2,36],96:[2,36],101:[2,36],102:[2,36],103:[2,36],104:[2,36],105:[2,36],106:[2,36],107:[2,36],108:[2,36],109:[2,36],114:[2,36],118:[2,36],119:[2,36]},{11:[2,84],46:[2,84],49:[2,84],67:214,95:[2,84],96:[2,84],101:[2,84],102:[2,84],103:[2,84],104:[2,84],105:[2,84],106:[2,84],107:[2,84],108:[2,84],109:[2,84],114:[2,84],118:[2,84],119:[2,84]},{11:[2,81],41:[2,81],42:[2,81],46:[2,81],89:[2,81],97:[2,81],101:[2,81],102:[2,81],103:[2,81],104:[2,81],105:[2,81],106:[2,81],107:[2,81],108:[2,81],109:[2,81],114:[2,81],118:[2,81],119:[2,81]},{11:[2,85],46:[2,85],49:[2,85],87:[2,85],95:[2,85],96:[2,85],101:[2,85],102:[2,85],103:[2,85],104:[2,85],105:[2,85],106:[2,85],107:[2,85],108:[2,85],109:[2,85],114:[2,85],118:[2,85],119:[2,85]},{6:138,11:[2,2],46:[1,215],49:[2,2],91:137,95:[2,2],96:[2,2],101:[2,2],102:[2,2],103:[2,2],104:[2,2],105:[2,2],106:[2,2],107:[2,2],108:[2,2],109:[2,2],114:[2,2],118:[2,2],119:[2,2]},{11:[2,68],41:[2,68],42:[2,68],46:[2,68],49:[2,68],86:[2,68],87:[2,68],95:[2,68],96:[2,68],101:[2,68],102:[2,68],103:[2,68],104:[2,68],105:[2,68],106:[2,68],107:[2,68],108:[2,68],109:[2,68],114:[2,68],118:[2,68],119:[2,68]}],
defaultActions: {54:[2,59],55:[2,60],99:[2,62],108:[2,74],165:[2,93],166:[2,94]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0: /* do nothing */                 
break;
case 1: /* do nothing */                 
break;
case 2: /* do nothing */                 
break;
case 3: /* do nothing */                 
break;
case 4: /* do nothing */                 
break;
case 5: return yy_.yytext[0];                
break;
case 6: return yy_.yytext[0];                
break;
case 7: yy_.yytext = "0"; return "tok_int_constant"; 
break;
case 8: yy_.yytext = "1"; return "tok_int_constant"; 
break;
case 9: return "tok_namespace";            
break;
case 10: return "tok_cpp_namespace";        
break;
case 11: return "tok_cpp_include";          
break;
case 12: return "tok_cpp_type";             
break;
case 13: return "tok_java_package";         
break;
case 14: return "tok_cocoa_prefix";         
break;
case 15: return "tok_csharp_namespace";     
break;
case 16: return "tok_delphi_namespace";     
break;
case 17: return "tok_php_namespace";        
break;
case 18: return "tok_py_module";            
break;
case 19: return "tok_perl_package";         
break;
case 20: return "tok_ruby_namespace";       
break;
case 21: return "tok_smalltalk_category";   
break;
case 22: return "tok_smalltalk_prefix";     
break;
case 23: return "tok_xsd_all";              
break;
case 24: return "tok_xsd_optional";         
break;
case 25: return "tok_xsd_nillable";         
break;
case 26: return "tok_xsd_namespace";        
break;
case 27: return "tok_xsd_attrs";            
break;
case 28: return "tok_include";              
break;
case 29: return "tok_void";                 
break;
case 30: return "tok_bool";                 
break;
case 31: return "tok_byte";                 
break;
case 32: return "tok_i16";                  
break;
case 33: return "tok_i32";                  
break;
case 34: return "tok_i64";                  
break;
case 35: return "tok_double";               
break;
case 36: return "tok_string";               
break;
case 37: return "tok_binary";               
break;
case 38: return "tok_slist";                
break;
case 39: return "tok_senum";                
break;
case 40: return "tok_map";                  
break;
case 41: return "tok_list";                 
break;
case 42: return "tok_set";                  
break;
case 43: return "tok_oneway";               
break;
case 44: return "tok_typedef";              
break;
case 45: return "tok_struct";               
break;
case 46: return "tok_union";                
break;
case 47: return "tok_xception";             
break;
case 48: return "tok_extends";              
break;
case 49: return "tok_throws";               
break;
case 50: return "tok_service";              
break;
case 51: return "tok_enum";                 
break;
case 52: return "tok_const";                
break;
case 53: return "tok_required";             
break;
case 54: return "tok_optional";             
break;
case 55:
  pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return "tok_oneway";

break;
case 56: thrift_reserved_keyword(yy_.yytext); 
break;
case 57: thrift_reserved_keyword(yy_.yytext); 
break;
case 58: thrift_reserved_keyword(yy_.yytext); 
break;
case 59: thrift_reserved_keyword(yy_.yytext); 
break;
case 60: thrift_reserved_keyword(yy_.yytext); 
break;
case 61: thrift_reserved_keyword(yy_.yytext); 
break;
case 62: thrift_reserved_keyword(yy_.yytext); 
break;
case 63: thrift_reserved_keyword(yy_.yytext); 
break;
case 64: thrift_reserved_keyword(yy_.yytext); 
break;
case 65: thrift_reserved_keyword(yy_.yytext); 
break;
case 66: thrift_reserved_keyword(yy_.yytext); 
break;
case 67: thrift_reserved_keyword(yy_.yytext); 
break;
case 68: thrift_reserved_keyword(yy_.yytext); 
break;
case 69: thrift_reserved_keyword(yy_.yytext); 
break;
case 70: thrift_reserved_keyword(yy_.yytext); 
break;
case 71: thrift_reserved_keyword(yy_.yytext); 
break;
case 72: thrift_reserved_keyword(yy_.yytext); 
break;
case 73: thrift_reserved_keyword(yy_.yytext); 
break;
case 74: thrift_reserved_keyword(yy_.yytext); 
break;
case 75: thrift_reserved_keyword(yy_.yytext); 
break;
case 76: thrift_reserved_keyword(yy_.yytext); 
break;
case 77: thrift_reserved_keyword(yy_.yytext); 
break;
case 78: thrift_reserved_keyword(yy_.yytext); 
break;
case 79: thrift_reserved_keyword(yy_.yytext); 
break;
case 80: thrift_reserved_keyword(yy_.yytext); 
break;
case 81: thrift_reserved_keyword(yy_.yytext); 
break;
case 82: thrift_reserved_keyword(yy_.yytext); 
break;
case 83: thrift_reserved_keyword(yy_.yytext); 
break;
case 84: thrift_reserved_keyword(yy_.yytext); 
break;
case 85: thrift_reserved_keyword(yy_.yytext); 
break;
case 86: thrift_reserved_keyword(yy_.yytext); 
break;
case 87: thrift_reserved_keyword(yy_.yytext); 
break;
case 88: thrift_reserved_keyword(yy_.yytext); 
break;
case 89: thrift_reserved_keyword(yy_.yytext); 
break;
case 90: thrift_reserved_keyword(yy_.yytext); 
break;
case 91: thrift_reserved_keyword(yy_.yytext); 
break;
case 92: thrift_reserved_keyword(yy_.yytext); 
break;
case 93: thrift_reserved_keyword(yy_.yytext); 
break;
case 94: thrift_reserved_keyword(yy_.yytext); 
break;
case 95: thrift_reserved_keyword(yy_.yytext); 
break;
case 96: thrift_reserved_keyword(yy_.yytext); 
break;
case 97: thrift_reserved_keyword(yy_.yytext); 
break;
case 98: thrift_reserved_keyword(yy_.yytext); 
break;
case 99: thrift_reserved_keyword(yy_.yytext); 
break;
case 100: thrift_reserved_keyword(yy_.yytext); 
break;
case 101: thrift_reserved_keyword(yy_.yytext); 
break;
case 102: thrift_reserved_keyword(yy_.yytext); 
break;
case 103: thrift_reserved_keyword(yy_.yytext); 
break;
case 104: thrift_reserved_keyword(yy_.yytext); 
break;
case 105: thrift_reserved_keyword(yy_.yytext); 
break;
case 106: thrift_reserved_keyword(yy_.yytext); 
break;
case 107: thrift_reserved_keyword(yy_.yytext); 
break;
case 108: thrift_reserved_keyword(yy_.yytext); 
break;
case 109: thrift_reserved_keyword(yy_.yytext); 
break;
case 110: thrift_reserved_keyword(yy_.yytext); 
break;
case 111: thrift_reserved_keyword(yy_.yytext); 
break;
case 112: thrift_reserved_keyword(yy_.yytext); 
break;
case 113: thrift_reserved_keyword(yy_.yytext); 
break;
case 114: thrift_reserved_keyword(yy_.yytext); 
break;
case 115: thrift_reserved_keyword(yy_.yytext); 
break;
case 116: thrift_reserved_keyword(yy_.yytext); 
break;
case 117: thrift_reserved_keyword(yy_.yytext); 
break;
case 118: thrift_reserved_keyword(yy_.yytext); 
break;
case 119: thrift_reserved_keyword(yy_.yytext); 
break;
case 120: thrift_reserved_keyword(yy_.yytext); 
break;
case 121: thrift_reserved_keyword(yy_.yytext); 
break;
case 122: thrift_reserved_keyword(yy_.yytext); 
break;
case 123: thrift_reserved_keyword(yy_.yytext); 
break;
case 124: thrift_reserved_keyword(yy_.yytext); 
break;
case 125: thrift_reserved_keyword(yy_.yytext); 
break;
case 126: thrift_reserved_keyword(yy_.yytext); 
break;
case 127: thrift_reserved_keyword(yy_.yytext); 
break;
case 128: thrift_reserved_keyword(yy_.yytext); 
break;
case 129: thrift_reserved_keyword(yy_.yytext); 
break;
case 130: thrift_reserved_keyword(yy_.yytext); 
break;
case 131: thrift_reserved_keyword(yy_.yytext); 
break;
case 132: thrift_reserved_keyword(yy_.yytext); 
break;
case 133: thrift_reserved_keyword(yy_.yytext); 
break;
case 134: thrift_reserved_keyword(yy_.yytext); 
break;
case 135: thrift_reserved_keyword(yy_.yytext); 
break;
case 136: thrift_reserved_keyword(yy_.yytext); 
break;
case 137: thrift_reserved_keyword(yy_.yytext); 
break;
case 138: thrift_reserved_keyword(yy_.yytext); 
break;
case 139: thrift_reserved_keyword(yy_.yytext); 
break;
case 140: thrift_reserved_keyword(yy_.yytext); 
break;
case 141: thrift_reserved_keyword(yy_.yytext); 
break;
case 142: thrift_reserved_keyword(yy_.yytext); 
break;
case 143: thrift_reserved_keyword(yy_.yytext); 
break;
case 144: thrift_reserved_keyword(yy_.yytext); 
break;
case 145: thrift_reserved_keyword(yy_.yytext); 
break;
case 146: thrift_reserved_keyword(yy_.yytext); 
break;
case 147: thrift_reserved_keyword(yy_.yytext); 
break;
case 148: thrift_reserved_keyword(yy_.yytext); 
break;
case 149: thrift_reserved_keyword(yy_.yytext); 
break;
case 150: thrift_reserved_keyword(yy_.yytext); 
break;
case 151: thrift_reserved_keyword(yy_.yytext); 
break;
case 152: thrift_reserved_keyword(yy_.yytext); 
break;
case 153: thrift_reserved_keyword(yy_.yytext); 
break;
case 154: thrift_reserved_keyword(yy_.yytext); 
break;
case 155: thrift_reserved_keyword(yy_.yytext); 
break;
case 156: thrift_reserved_keyword(yy_.yytext); 
break;
case 157: thrift_reserved_keyword(yy_.yytext); 
break;
case 158: thrift_reserved_keyword(yy_.yytext); 
break;
case 159:
  $$ = Number(yy_.yytext);
  if ( $$ === Infinity ) {
    integer_overflow(yy_.yytext);
  }
  return "tok_int_constant";

break;
case 160:
  $$ = Number(yy_.yytext);
  if ( $$ === Infinity ) {
    integer_overflow(yy_.yytext);
  }
  return "tok_int_constant";

break;
case 161:
  $$ = Number(yy_.yytext);
  return "tok_dub_constant";

break;
case 162:
  return "tok_identifier";

break;
case 163:
  return "tok_st_identifier";

break;
case 164:
  var mark = yy_.yytext[0];
  var result;
  for(;;)
  {
    var ch = this.input();
    switch (ch) {
      case this.EOF:
        yyerror("End of file while read string at %d\n", yy_.yylineno);
        exit(1);
      case '\n':
        yyerror("End of line while read string at %d\n", yy_.yylineno - 1);
        exit(1);
      case '\\':
        ch = this.input();
        switch (ch) {
          case 'r':
            result += '\r';
            continue;
          case 'n':
            result += '\n';
            continue;
          case 't':
            result += '\t';
            continue;
          case '"':
            result += '"';
            continue;
          case '\'':
            result += '\'';
            continue;
          case '\\':
            result += '\\';
            continue;
          default:
            yyerror("Bad escape character\n");
            return -1;
        }
        break;
      default:
        if (ch == mark) {
          $$ = result;
          return "tok_literal";
        } else {
          result += ch;
        }
    }
  }

break;
case 165:
 /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  var g_parse_mode = 1; //AG: tmp
  var PROGRAM = 1;      //AG: tmp
  var clear_doctext = function() { console.log("clearing doctext"); }; //AG: tmp
  var clean_up_doctext = function(g_doctext) { console.log("cleaning up doctext: "+g_doctext); }; //AG: tmp
  if (g_parse_mode == PROGRAM) {
    clear_doctext();
    g_doctext = yy_.yytext.substr(3, yy_.yytext.length - 5);
    g_doctext = clean_up_doctext(g_doctext);
    g_doctext_lineno = yy_.yylineno;
  }

break;
case 166:
  unexpected_token(yy_.yytext);

break;
case 167:
  /* Catch-all to let us catch "*" in the parser. */
  return Number(yy_.yytext[0]);

break;
}
};
lexer.rules = [/^(?:(([ \t\r\n]+)))/,/^(?:((\/\*\**\*\/)))/,/^(?:((\/\*[^*]\/*([^*/]|[^*]\/|\*[^/])*\**\*\/)))/,/^(?:((\/\/[^\n]*)))/,/^(?:((#[^\n]*)))/,/^(?:(([:;\,\{\}\(\)\=<>\[\]])))/,/^(?:\*)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:namespace\b)/,/^(?:cpp_namespace\b)/,/^(?:cpp_include\b)/,/^(?:cpp_type\b)/,/^(?:java_package\b)/,/^(?:cocoa_prefix\b)/,/^(?:csharp_namespace\b)/,/^(?:delphi_namespace\b)/,/^(?:php_namespace\b)/,/^(?:py_module\b)/,/^(?:perl_package\b)/,/^(?:ruby_namespace\b)/,/^(?:smalltalk_category\b)/,/^(?:smalltalk_prefix\b)/,/^(?:xsd_all\b)/,/^(?:xsd_optional\b)/,/^(?:xsd_nillable\b)/,/^(?:xsd_namespace\b)/,/^(?:xsd_attrs\b)/,/^(?:include\b)/,/^(?:void\b)/,/^(?:bool\b)/,/^(?:byte\b)/,/^(?:i16\b)/,/^(?:i32\b)/,/^(?:i64\b)/,/^(?:double\b)/,/^(?:string\b)/,/^(?:binary\b)/,/^(?:slist\b)/,/^(?:senum\b)/,/^(?:map\b)/,/^(?:list\b)/,/^(?:set\b)/,/^(?:oneway\b)/,/^(?:typedef\b)/,/^(?:struct\b)/,/^(?:union\b)/,/^(?:exception\b)/,/^(?:extends\b)/,/^(?:throws\b)/,/^(?:service\b)/,/^(?:enum\b)/,/^(?:const\b)/,/^(?:required\b)/,/^(?:optional\b)/,/^(?:async\b)/,/^(?:BEGIN\b)/,/^(?:END\b)/,/^(?:__CLASS__\b)/,/^(?:__DIR__\b)/,/^(?:__FILE__\b)/,/^(?:__FUNCTION__\b)/,/^(?:__LINE__\b)/,/^(?:__METHOD__\b)/,/^(?:__NAMESPACE__\b)/,/^(?:abstract\b)/,/^(?:alias\b)/,/^(?:and\b)/,/^(?:args\b)/,/^(?:as\b)/,/^(?:assert\b)/,/^(?:begin\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:catch\b)/,/^(?:class\b)/,/^(?:clone\b)/,/^(?:continue\b)/,/^(?:declare\b)/,/^(?:def\b)/,/^(?:default\b)/,/^(?:del\b)/,/^(?:delete\b)/,/^(?:do\b)/,/^(?:dynamic\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:elseif\b)/,/^(?:elsif\b)/,/^(?:end\b)/,/^(?:enddeclare\b)/,/^(?:endfor\b)/,/^(?:endforeach\b)/,/^(?:endif\b)/,/^(?:endswitch\b)/,/^(?:endwhile\b)/,/^(?:ensure\b)/,/^(?:except\b)/,/^(?:exec\b)/,/^(?:finally\b)/,/^(?:float\b)/,/^(?:for\b)/,/^(?:foreach\b)/,/^(?:function\b)/,/^(?:global\b)/,/^(?:goto\b)/,/^(?:if\b)/,/^(?:implements\b)/,/^(?:import\b)/,/^(?:in\b)/,/^(?:inline\b)/,/^(?:instanceof\b)/,/^(?:interface\b)/,/^(?:is\b)/,/^(?:lambda\b)/,/^(?:module\b)/,/^(?:native\b)/,/^(?:new\b)/,/^(?:next\b)/,/^(?:nil\b)/,/^(?:not\b)/,/^(?:or\b)/,/^(?:pass\b)/,/^(?:public\b)/,/^(?:print\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:public\b)/,/^(?:raise\b)/,/^(?:redo\b)/,/^(?:rescue\b)/,/^(?:retry\b)/,/^(?:register\b)/,/^(?:return\b)/,/^(?:self\b)/,/^(?:sizeof\b)/,/^(?:static\b)/,/^(?:super\b)/,/^(?:switch\b)/,/^(?:synchronized\b)/,/^(?:then\b)/,/^(?:this\b)/,/^(?:throw\b)/,/^(?:transient\b)/,/^(?:try\b)/,/^(?:undef\b)/,/^(?:union\b)/,/^(?:unless\b)/,/^(?:unsigned\b)/,/^(?:until\b)/,/^(?:use\b)/,/^(?:var\b)/,/^(?:virtual\b)/,/^(?:volatile\b)/,/^(?:when\b)/,/^(?:while\b)/,/^(?:with\b)/,/^(?:xor\b)/,/^(?:yield\b)/,/^(?:(([+-]?[0-9]+(?!\.))))/,/^(?:((0x[0-9A-Fa-f]+)))/,/^(?:(([+-]?([0-9]*\.)?([0-9]+)([eE][+-]?[0-9]+)?)))/,/^(?:(([a-zA-Z_][\.a-zA-Z_0-9]*)))/,/^(?:(([a-zA-Z-][\.a-zA-Z_0-9-]*)))/,/^(?:((['\"])))/,/^(?:((\/\*\*([^*/]|[^*]\/|\*[^/])*\**\*\/)))/,/^(?:.)/,/^(?:.)/];
lexer.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = thriftweb;
exports.Parser = thriftweb.Parser;
exports.parse = function () { return thriftweb.parse.apply(thriftweb, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    var source, cwd;
    if (typeof process !== 'undefined') {
        source = require('fs').readFileSync(require('path').resolve(args[1]), "utf8");
    } else {
        source = require("file").path(require("file").cwd()).join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
}